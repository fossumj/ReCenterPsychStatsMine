var.equal=TRUE
)
#Setting the "random" seed ensures that everyone gets the same result, every time they rerun the analysis.
#My personal practice is to create a random seed that represents the day I write up the problem (in this case August, 15, 2022)
#When the Suggestions for Practice invite you to "change the random seed," simply change this number to anything you like (maybe your birthday or today's date)
set.seed(220815)
#Assigns as physician ID number to each row
#Simulates 33 numbers between 220 and 1213
dfOneSample <- data.frame(
ID = factor(seq(1:33)),
PhysicianSeconds = sample(220: 1213,33, replace=TRUE)
)
#Displays the first 6 rows of the df
head(dfOneSample)
View(dfOneSample)
str$dfOneSample
str(dfOneSample)
#writing the simulated data as a .csv
write.table(dfOneSample, file = "dfOneSample.csv", sep = ',', col.names=TRUE, row.names=FALSE)
#writing the simulated data as a .csv
#write.table(dfOneSample, file = "dfOneSample.csv", sep = ',', col.names=TRUE, row.names=FALSE)
#at this point you could clear your environment and then bring the data back in as a .csv
#reading the data back in as a .csv file
dfOneSample<- read.csv ('dfOneSample.csv', header = TRUE)
View(dfOneSample)
saveRDS(dfOneSample, 'dfOneSample.rds')
#saveRDS(dfOneSample, 'dfOneSample.rds')
dfOneSample <- readRDS('dfOneSample.rds')
View(dfOneSample)
ggpubr::gghistogram(dfOneSample, x = "PhysicianSeconds",  add = "mean",  rug = TRUE)
ggpubr::ggboxplot(dfOneSample$PhysicianSeconds,
ylab = "Seconds with Patient", xlab = FALSE,
)
ggpubr::ggboxplot(dfOneSample$PhysicianSeconds,
ylab = "Seconds with Patient", xlab = FALSE, jitter=TRUE
)
ggpubr::ggboxplot(dfOneSample$PhysicianSeconds,
ylab = "Seconds with Patient", xlab = FALSE, add="jitter"
)
ggpubr::ggboxplot(dfOneSample$PhysicianSeconds,
ylab = "Seconds with Patient", xlab = FALSE, add="jitter", palette ="#00AFBB"
)
ggpubr::ggboxplot(dfOneSample$PhysicianSeconds,
ylab = "Seconds with Patient", xlab = FALSE, add="jitter", palette =c("#00AFBB")
)
ggpubr::ggboxplot(dfOneSample$PhysicianSeconds,
ylab = "Seconds with Patient", xlab = FALSE, add="jitter"
)
psych::describe(dfOneSample$PhysicianSeconds)
psych::describe(dfOneSample$PhysicianSeconds)
(717.12 - 73.5)/(312.22/sqrt(33))
qt(p=.05/2, df=33,lower.tail=FALSE)
lsr::oneSampleTTest(x=dfOneSample$PhysicianSeconds, mu=73.5)
(312.22/sqrt(33))
qt(p=.05/2, df=33,lower.tail=FALSE)
(717.12-73.5) - (2.0345)*(312.22/sqrt(33))
(717.12-73.5) - (2.0345)*(312.22/sqrt(33))
(717.12-73.5) + (2.0345)*(312.22/sqrt(33))
(717.12-73.5) - ((2.0345)*(312.22/sqrt(33)))
(717.12-73.5) + ((2.0345)*(312.22/sqrt(33)))
(717.12-73.5) - ((2.0345)*(312.22/sqrt(33)))
(717.12-73.5) + ((2.0345)*(312.22/sqrt(33)))
qt(p=.05/2, df=32,lower.tail=FALSE)
(717.12-73.5) - ((2.0369)*(312.22/sqrt(33)))
(717.12-73.5) + ((2.0369)*(312.22/sqrt(33)))
(717.12-73.5) - ((2.0369^2)*(312.22/sqrt(33)))
(717.12-73.5) + ((2.0369^2)*(312.22/sqrt(33)))
(717.12-73.5) - ((2.0369)*(312.22/sqrt(33)))
(717.12-73.5) + ((2.0369)*(312.22/sqrt(33)))
(717.12-73.5) - ((2.0369)*(312.22^2/sqrt(33)))
(717.12-73.5) + ((2.0369)*(312.22^2/sqrt(33)))
(717.12) - ((2.0369)*(312.22/sqrt(33)))
(717.12) + ((2.0369)*(312.22/sqrt(33)))
#First formula
(717.12 - 73.5)/312.22
#Second formula
11.842/sqrt(33)
#t.values <- seq(-4, 4, .1)
#plot(x = t.values,y = dt(t.values,3), type = "l", lty = "dotted", ylim = c(0,.4), xlab = "t", ylab = "f(t)")
#plot + lines(t.values,dt(t.values,10),lty = "dashed") lines(t.values,dnorm(t.values))
lsr::oneSampleTTest(x=dfOneSample$PhysicianSeconds, mu=73.5)
ggpubr::ggboxplot(dfOneSample$PhysicianSeconds,
ylab = "Seconds with Patient", xlab = FALSE, add="jitter", title = "Figure 1. Physician Time with Patients (in seconds)"
)
ggpubr::ggboxplot(dfIndSamples, x = "PatientRace", y = "Verbal", color = "PatientRace", palette =c("#00AFBB", "#FC4E07"), add = "jitter", title = "Figure 1. Physician Verbal Engagement as a Function of Patient Race")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(psych)){install.packages("psych")}
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(dplyr)){install.packages("dplyr")}
#if(!require(lsr)){install.packages("lsr")}
#if(!require(ggpubr)){install.packages("ggpubr")}
#if(!require(pwr)){install.packages("pwr")}
set.seed(220815)
#sample size, M, and SD for Black then White patients
Verbal <- c(rnorm(33, mean=8.37, sd=3.36), rnorm(33, mean = 8.41, sd=3.21))
#set upper bound
Verbal[Verbal>27]<-3
#set lower bound
Verbal[Verbal<0]<-0
#sample size, M, and SD for Black then White patients
Nonverbal <- c(rnorm(33, mean=2.68, sd=.84), rnorm(33, mean = 2.93, sd=.77))
#set upper bound
Nonverbal[Nonverbal>5]<-5
#set lower bound
Nonverbal[Nonverbal<0]<-0
ID<-factor(seq(1,66))
#name factors and identify how many in each group; should be in same order as first row of script
PatientRace<-c(rep("Black", 33), rep("White", 33))
#groups the 3 variables into a single df:  ID#, DV, condition
dfIndSamples <-data.frame(ID, PatientRace, Verbal, Nonverbal)
str(dfIndSamples)
dfIndSamples$PatientRace <- factor(dfIndSamples$PatientRace, levels = c("Black", "White"))
str(dfIndSamples)
#writing the simulated data as a .csv
#write.table(dfIndSamples, file = "dfIndSamples.csv", sep = ',', col.names=TRUE, row.names=FALSE)
#at this point you could clear your environment and then bring the data back in as a .csv
#reading the data back in as a .csv file
#dfIndSamples<- read.csv ('dfIndSamples.csv', header = TRUE)
#saveRDS(dfIndSamples, 'dfIndSamples.rds')
#dfIndSamples <- readRDS('dfIndSamples.rds')
ggpubr::ggboxplot(dfIndSamples, x = "PatientRace", y = "Verbal", color = "PatientRace", palette =c("#00AFBB", "#FC4E07"), add = "jitter")
psych::describe(dfIndSamples$Verbal)
psych::describeBy(dfIndSamples, group=PatientRace, mat=TRUE)
car::leveneTest (Verbal ~ PatientRace, dfIndSamples, center=mean)
sqrt((2.985^2/33) + (3.203^2/33))
(7.615 - 8.891)/0.762
qt(.05/2, 64, lower.tail=TRUE)
qt(.05/2, 64, lower.tail=FALSE)
qt(.05/2, 64, lower.tail=TRUE)
qt(.05/2, 64, lower.tail=FALSE)
(7.614-8.891)- (1.99773*0.762)
(7.614-8.891)+(1.99773*0.762)
-1.675*(sqrt((33+33)/(33*33)))
(-1.6745*-1.6745)/((-1.6745*-1.6745)+(33 + 33 -2))
lsr::independentSamplesTTest(
formula = Verbal ~PatientRace,
data = dfIndSamples,
var.equal=TRUE
)
lsr::independentSamplesTTest(
formula = Verbal ~PatientRace,
data = dfIndSamples,
var.equal=FALSE
)
apaTables::apa.1way.table(PatientRace, Verbal, dfIndSamples)
ggpubr::ggboxplot(dfIndSamples, x = "PatientRace", y = "Verbal", color = "PatientRace", palette =c("#00AFBB", "#FC4E07"), add = "jitter", title = "Figure 1. Physician Verbal Engagement as a Function of Patient Race")
pwr::pwr.t.test(d= (717.121-73.5)/312.216),n = 33, power=NULL,sig.level=0.05,type="two.sample",alternative="two.sided")
pwr::pwr.t.test(d= (717.121-73.5)/312.216,n = 33, power=NULL,sig.level=0.05,type="two.sample",alternative="two.sided")
pwr::pwr.t.test(d= (717.121-73.5)/312.216,n = 33, power=NULL,sig.level=0.05,type="one.sample",alternative="two.sided")
pwr::pwr.t.test(d= (717.121-73.5)/312.216,n = 33,n = NULL, power=0.8,sig.level=0.05,type="one.samp.e",alternative="two.sided")
pwr::pwr.t.test(d= (717.121-73.5)/312.216, n = NULL, power=0.8,sig.level=0.05,type="one.samp.e",alternative="two.sided")
pwr::pwr.t.test(d= (717.121-73.5)/312.216, n = NULL, power=0.8,sig.level=0.05,type="one.sample",alternative="two.sided")
#Setting the "random" seed ensures that everyone gets the same result, every time they rerun the analysis.
#My personal practice is to create a random seed that represents the day I write up the problem (in this case August, 15, 2022)
#When the Suggestions for Practice invite you to "change the random seed," simply change this number to anything you like (maybe your birthday or today's date)
set.seed(220820)
#Assigns as physician ID number to each row
#Simulates 33 numbers between 220 and 1213
rdfOneSample <- data.frame(
ID = factor(seq(1:4)),
PhysicianSeconds = sample(220: 1213,4, replace=TRUE)
)
#Displays the first 6 rows of the df
head(rdfOneSample)
#Setting the "random" seed ensures that everyone gets the same result, every time they rerun the analysis.
#My personal practice is to create a random seed that represents the day I write up the problem (in this case August, 15, 2022)
#When the Suggestions for Practice invite you to "change the random seed," simply change this number to anything you like (maybe your birthday or today's date)
set.seed(220820)
#Assigns as physician ID number to each row
#Simulates 33 numbers between 220 and 1213
rdfOneSample <- data.frame(
ID = factor(seq(1:4)),
PhysicianSeconds = sample(220: 1213,4, replace=TRUE)
)
#Displays the first 6 rows of the df
head(rdfOneSample)
lsr::oneSampleTTest(x=rdfOneSample$PhysicianSeconds, mu=73.5)
#http://rstudio-pubs-static.s3.amazonaws.com/78857_86c2403ca9c146ba8fcdcda79c3f4738.html
par(mfrow=c(1,3))
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-1,1,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-1,x,1),c(0,y,0),col="#FF99CC")
text(0,0.1,"68.3%")
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-2,2,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-2,x,2),c(0,y,0),col="#cc99cc")
text(0,0.1,"95.4%")
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-3,3,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-3,x,3),c(0,y,0),col="#993366")
text(0,0.1,"99.7%")
#https://r-charts.com/distribution/histogram-curves/
set.seed(220821)
PhysTime <- data.frame(minutes = rnorm(200, mean=10, sd=2))
psych::describe(PhysTime$minutes)
9.9 - 1*(2)
9.9 + 1*(2)
#http://rstudio-pubs-static.s3.amazonaws.com/78857_86c2403ca9c146ba8fcdcda79c3f4738.html
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-3,0,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-3,x,0),c(0,y,0),col="#993366")
arrows(.3,.2,0,0,length=.15)
text(.5,0.22,"z = 0.000")
text(-.75,0.1,"0.5000 or 50%")
text(1,0.1,"0.5000 or 50%")
pnorm(0, mean=0, sd=1)
pnorm(9.9, mean=9.9, sd=2)
#calculating the z-score
(5-9.9)/2 #for 5 minutes
#calculating the z-score
(5-9.9)/2 #for 5 minutes
pnorm(-2.45, mean=0, sd=1)
pnorm(5, mean=9.9, sd=2)
#http://rstudio-pubs-static.s3.amazonaws.com/78857_86c2403ca9c146ba8fcdcda79c3f4738.html
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-3,-2.45,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-3,x,-2.45),c(0,y,0),col="#993366")
arrows(-2.45,.2,-2.45,0,length=.15)
text(-2.45,0.22,"z = -2.45")
text(-2.3,0.1,"0.007 or .7%")
text(0,0.1,"0.993 or 99.3%")
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(1.05,3,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(1.05,x,3),c(0,y,0),col="#993366")
arrows(.5,.2,1.05,0,length=.15)
text(.5,0.22,"z = 1.05")
text(-1,0.1,".8531 or 85%")
text(1.6,0.1,".1469 or 15%")
apaTables::apa.cor.table(PhysTime)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(psych)){install.packages("psych")}
#if(!require(faux)){install.packages("faux")}
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(dplyr)){install.packages("dplyr")}
#if(!require(lsr)){install.packages("lsr")}
#if(!require(ggpubr)){install.packages("ggpubr")}
#http://rstudio-pubs-static.s3.amazonaws.com/78857_86c2403ca9c146ba8fcdcda79c3f4738.html
par(mfrow=c(1,3))
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-1,1,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-1,x,1),c(0,y,0),col="#FF99CC")
text(0,0.1,"68.3%")
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-2,2,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-2,x,2),c(0,y,0),col="#cc99cc")
text(0,0.1,"95.4%")
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-3,3,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-3,x,3),c(0,y,0),col="#993366")
text(0,0.1,"99.7%")
#https://r-charts.com/distribution/histogram-curves/
set.seed(220821)
PhysTime <- data.frame(minutes = rnorm(200, mean=10, sd=2))
psych::describe(PhysTime$minutes)
9.9 - 1*(2)
9.9 + 1*(2)
9.9 - 2*(2)
9.9 + 2*(2)
9.9 - 3*(2)
9.9 + 3*(2)
(9.9-9.9)/2 #for 9.9 minutes
#http://rstudio-pubs-static.s3.amazonaws.com/78857_86c2403ca9c146ba8fcdcda79c3f4738.html
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-3,0,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-3,x,0),c(0,y,0),col="#993366")
arrows(.3,.2,0,0,length=.15)
text(.5,0.22,"z = 0.000")
text(-.75,0.1,"0.5000 or 50%")
text(1,0.1,"0.5000 or 50%")
pnorm(0, mean=0, sd=1)
pnorm(9.9, mean=9.9, sd=2)
#calculating the z-score
(5-9.9)/2 #for 5 minutes
pnorm(-2.45, mean=0, sd=1)
pnorm(5, mean=9.9, sd=2)
#http://rstudio-pubs-static.s3.amazonaws.com/78857_86c2403ca9c146ba8fcdcda79c3f4738.html
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-3,-2.45,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-3,x,-2.45),c(0,y,0),col="#993366")
arrows(-2.45,.2,-2.45,0,length=.15)
text(-2.45,0.22,"z = -2.45")
text(-2.3,0.1,"0.007 or .7%")
text(0,0.1,"0.993 or 99.3%")
(12-9.9)/2 #for 12 minutes
1-.8531
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(1.05,3,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(1.05,x,3),c(0,y,0),col="#993366")
arrows(.5,.2,1.05,0,length=.15)
text(.5,0.22,"z = 1.05")
text(-1,0.1,".8531 or 85%")
text(1.6,0.1,".1469 or 15%")
PhysTime$zMinutes <- (PhysTime$minutes - mean(PhysTime$minutes))/sd(PhysTime$minutes)
head(PhysTime)
apaTables::apa.cor.table(PhysTime)
apaTables::apa.cor.table(PhysTime)
par(mfrow=c(1,3))
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-1.96,1.96,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-1.96,x,1.96),c(0,y,0),col="#CCCCCC")
text(-1.96,0.1,"-1.96")
text(1.96,0.1,"1.96")
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-1.64,3,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-1.64,x,3),c(0,y,0),col="#CCCCCC")
text(-1.64,0.2,"-1.64")
par(mfrow=c(1,3))
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-1.96,1.96,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-1.96,x,1.96),c(0,y,0),col="#CCCCCC")
text(-1.96,0.1,"-1.96")
text(1.96,0.1,"1.96")
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-1.64,3,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-1.64,x,3),c(0,y,0),col="#CCCCCC")
text(-1.60,0.2,"-1.64")
par(mfrow=c(1,3))
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-1.96,1.96,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-1.96,x,1.96),c(0,y,0),col="#CCCCCC")
text(-1.96,0.1,"-1.96")
text(1.96,0.1,"1.96")
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-1.64,3,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-1.64,x,3),c(0,y,0),col="#CCCCCC")
text(-1.70,0.2,"-1.64")
par(mfrow=c(1,3))
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-1.96,1.96,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-1.96,x,1.96),c(0,y,0),col="#CCCCCC")
text(-1.96,0.1,"-1.96")
text(1.96,0.1,"1.96")
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-1.64,3,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-1.64,x,3),c(0,y,0),col="#CCCCCC")
text(-1.75,0.2,"-1.64")
par(mfrow=c(1,3))
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-1.96,1.96,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-1.96,x,1.96),c(0,y,0),col="#CCCCCC")
text(-2.5,0.1,"-1.96")
text(2,0.1,"1.96")
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-1.64,3,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-1.64,x,3),c(0,y,0),col="#CCCCCC")
text(-1.75,0.2,"-1.64")
par(mfrow=c(1,3))
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-1.96,1.96,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-1.96,x,1.96),c(0,y,0),col="#CCCCCC")
text(-2.3,0.1,"-1.96")
text(2.2,0.1,"1.96")
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-1.64,3,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-1.64,x,3),c(0,y,0),col="#CCCCCC")
text(-1.75,0.2,"-1.64")
#Setting the "random" seed ensures that everyone gets the same result, every time they rerun the analysis.
#My personal practice is to create a random seed that represents the day I write up the problem (in this case August, 15, 2022)
#When the Suggestions for Practice invite you to "change the random seed," simply change this number to anything you like (maybe your birthday or today's date)
set.seed(220815)
#Assigns as physician ID number to each row
#Simulates 33 numbers between 220 and 1213
dfOneSample <- data.frame(
ID = factor(seq(1:33)),
PhysicianSeconds = sample(220: 1213,33, replace=TRUE)
)
#Displays the first 6 rows of the df
head(dfOneSample)
str(dfOneSample)
#https://r-charts.com/distribution/histogram-curves/
set.seed(220821)
PhysTime <- data.frame(minutes = rnorm(33, mean=8, sd=2.5))
View(PhysTime)
#https://r-charts.com/distribution/histogram-curves/
set.seed(220821)
PhysTime <- data.frame(minutes = rnorm(33, mean=10, sd=2.5))
#Setting the "random" seed ensures that everyone gets the same result, every time they rerun the analysis.
#My personal practice is to create a random seed that represents the day I write up the problem (in this case August, 15, 2022)
#When the Suggestions for Practice invite you to "change the random seed," simply change this number to anything you like (maybe your birthday or today's date)
set.seed(220822)
dfOneSample <- data.frame(minutes = rnorm(33, mean=10, sd=2.5))
#Setting the "random" seed ensures that everyone gets the same result, every time they rerun the analysis.
#My personal practice is to create a random seed that represents the day I write up the problem (in this case August, 15, 2022)
#When the Suggestions for Practice invite you to "change the random seed," simply change this number to anything you like (maybe your birthday or today's date)
set.seed(220822)
dfOneSample <- data.frame(minutes = rnorm(33, mean=10, sd=2.5))
head(dfOneSample)
View(dfOneSample)
str(dfOneSample)
ggpubr::gghistogram(dfOneSample, x = "PhysicianSeconds",  add = "mean",  rug = TRUE)
ggpubr::gghistogram(dfOneSample, x = "PhysMinutes",  add = "mean",  rug = TRUE)
ggpubr::gghistogram(dfOneSample, x = "PhysMinutes",  add = "mean",  rug = TRUE)
View(dfOneSample)
View(PhysTime)
#Setting the "random" seed ensures that everyone gets the same result, every time they rerun the analysis.
#My personal practice is to create a random seed that represents the day I write up the problem (in this case August, 15, 2022)
#When the Suggestions for Practice invite you to "change the random seed," simply change this number to anything you like (maybe your birthday or today's date)
set.seed(220822)
dfOneSample <- data.frame(PhysMins = rnorm(33, mean=10, sd=2.5))
head(dfOneSample)
View(dfOneSample)
str(dfOneSample)
ggpubr::gghistogram(dfOneSample, x = "PhysMins",  add = "mean",  rug = TRUE)
ggpubr::ggboxplot(dfOneSample$PhysMins,
ylab = "Seconds with Patient", xlab = FALSE, add="jitter"
)
psych::describe(dfOneSample$PhysMins)
(10.01 - 1.23)/(2.7/sqrt(33))
qt(p=.05/2, df=33,lower.tail=FALSE)
qt(p=.05/2, df=32,lower.tail=FALSE)
(10.01) - ((2.0369)*(2.7/sqrt(33)))
(10.01) + ((2.0369)*(2.72/sqrt(33)))
#First formula
(10.01 - 1.23)/2.7
#Second formula
18.68/sqrt(33)
(10.01) - ((2.0369)*(2.7/sqrt(33)))
(10.01) + ((2.0369)*(2.7/sqrt(33)))
#First formula
(10.01 - 1.23)/2.7
#Second formula
18.68047/sqrt(33)
lsr::oneSampleTTest(x=dfOneSample$PhysicianSeconds, mu=1.23)
lsr::oneSampleTTest(x=dfOneSample$PhysMins, mu=1.23)
ggpubr::ggboxplot(dfOneSample$PhysMins,
ylab = "Physician Minutes", xlab = FALSE, add="jitter", title = "Figure 1. Physician Time with Patients (in minutes)"
)
pwr::pwr.t.test(d= (10.01-1.23)/2.7,n = 33, power=NULL,sig.level=0.05,type="one.sample",alternative="two.sided")
pwr::pwr.t.test(d= (10.01-1.23)/2.7, n = NULL, power=0.8,sig.level=0.05,type="one.sample",alternative="two.sided")
pwr::pwr.t.test(d= (10.01-1.23)/2.7, n = NULL, power=0.8,sig.level=0.05,type="one.sample",alternative="two.sided")
set.seed(220822)
rdfOneSample <- data.frame(rPhysMins = rnorm(4, mean=10, sd=2.5))
head(rdfOneSample)
lsr::oneSampleTTest(x=rdfOneSample$rPhysMins, mu=1.23)
