#if(!require(rstatix)){install.packages("rstatix")} #pipe-friendly R functions
#if(!require(data.table)){install.packages("data.table")} #pipe-friendly R functions
#if(!require(reshape2)){install.packages("reshape2")} #pipe-friendly R functions
#if(!require(WebPower)){install.packages("WebPower")} #power analysis tools for repeated measures
#if(!require(MASS)){install.packages("MASS")} #power analysis tools for repeated measures
set.seed(2022)
ID<-factor(c(rep(seq(1,8),each=3)))#gives me 8 numbers, assigning each number 3 consecutive spots, in sequence
Resilience<-rnorm(24,mean=c(5.7,6.21,6.26),sd=c(.88,.79,.37)) #gives me a column of 24 numbers with the specified Ms and SD
Wave<-rep(c("Pre","Post", "FollowUp"),each=1,8) #repeats pre, post, follow-up once each, 8 times
Amodeo_long<-data.frame(ID, Wave, Resilience)
#OneWay_mod<-aov(Resilience~Wave + Error(ID/(Wave)), AmodeoSIM)
#summary(OneWay_mod)
#model.tables(OneWay_mod,"means")
str(Amodeo_long)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(tidyverse)){install.packages("tidyverse")} #manipulate data
#if(!require(psych)){install.packages("psych")}
#if(!require(ggpubr)){install.packages("ggpubr")} #easy plots
#if(!require(rstatix)){install.packages("rstatix")} #pipe-friendly R functions
#if(!require(data.table)){install.packages("data.table")} #pipe-friendly R functions
#if(!require(reshape2)){install.packages("reshape2")} #pipe-friendly R functions
#if(!require(WebPower)){install.packages("WebPower")} #power analysis tools for repeated measures
#if(!require(MASS)){install.packages("MASS")} #power analysis tools for repeated measures
set.seed(2022)
ID<-factor(c(rep(seq(1,8),each=3)))#gives me 8 numbers, assigning each number 3 consecutive spots, in sequence
Resilience<-rnorm(24,mean=c(5.7,6.21,6.26),sd=c(.88,.79,.37)) #gives me a column of 24 numbers with the specified Ms and SD
Wave<-rep(c("Pre","Post", "FollowUp"),each=1,8) #repeats pre, post, follow-up once each, 8 times
Amodeo_long<-data.frame(ID, Wave, Resilience)
#OneWay_mod<-aov(Resilience~Wave + Error(ID/(Wave)), AmodeoSIM)
#summary(OneWay_mod)
#model.tables(OneWay_mod,"means")
str(Amodeo_long)
Amodeo_long$Wave <- factor(Amodeo_long$Wave, levels = c("Pre", "Post", "FollowUp"))
str(Amodeo_long)
# Create a new df (Amodeo_wide)
# Identify the original df
# We are telling it to connect the values of the Resilience variable its respective Wave designation
Amodeo_wide <- reshape2::dcast(data = Amodeo_long, formula =ID~Wave, value.var = "Resilience")
#doublecheck to see if they did what you think
str(Amodeo_wide)
Amodeo_wide$ID <- factor(Amodeo_wide$ID)
#to save the df as an .rds (think "R object") file on your computer; it should save in the same file as the .rmd file you are working with
#saveRDS(Amodeo_long, "Amodeo_longRDS.rds")
#saveRDS(Amodeo_wide, "Amodeo_wideRDS.rds")
#bring back the simulated dat from an .rds file
#Amodeo_long <- readRDS("Amodeo_longRDS.rds")
#Amodeo_wide <- readRDS("Amodeo_wideRDS.rds")
#write the simulated data  as a .csv
#write.table(Amodeo_long, file="Amodeo_longCSV.csv", sep=",", col.names=TRUE, row.names=FALSE)
#write.table(Amodeo_wide, file="Amodeo_wideCSV.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
#Amodeo_long <- read.csv ("Amodeo_longCSV.csv", header = TRUE)
#Amodeo_wide <- read.csv ("Amodeo_wideCSV.csv", header = TRUE)
str(Amodeo_long)
library(psych)
psych::describeBy(Amodeo_long$Resilience, Wave, mat = TRUE, data = Amodeo_long, digits = 3)
#Note. Recently my students and I have been having intermittent struggles with the describeBy function in the psych package. We have noticed that it is problematic when using .rds files and when using data directly imported from Qualtrics. If you are having similar difficulties, try uploading the .csv file and making the appropriate formatting changes.
psych::describe(Amodeo_wide)
boxplot (Resilience ~ Wave, data = Amodeo_long, xlab = "Wave", ylab = "Resilience", n.label = TRUE)
mean(Amodeo_long$Resilience)
library(tidyverse)
Amodeo_long <- Amodeo_long %>%
mutate(m_dev = Resilience-mean(Resilience))
head(Amodeo_long)
sum(Amodeo_long$m_dev)
Amodeo_long <- Amodeo_long %>%
mutate(m_devSQ = m_dev^2)
head(Amodeo_long)
sum(Amodeo_long$m_devSQ)
psych::describeBy(Resilience ~ ID, data = Amodeo_long, mat = TRUE, digits = 3)
(.605^2*(3-1)) + (.760^2*(3-1)) + (.992^2*(3-1))+ (.568^2*(3-1))+ (.824^2*(3-1))+ (.146^2*(3-1))+ (.248^2*(3-1)) + (.553^2*(3-1))
psych::describe(Amodeo_wide)
mean(Amodeo_long$Resilience)
(8*(6.14 - 6.017)^2) + (8*(6.33 - 6.017)^2) + (8*(5.59 - 6.017)^2)
#df is 3-1 = 2
6.636 - 2.363
16-2
11.66 - 6.64
23-16
# mean squares for the model
2.36/2
# mean squares for the residual
4.27 / 14
1.18 / .305
#looking up the F critical values
qf(.05, 2, 14, lower.tail=FALSE)#Model F critical value
#Note that we are creating an object (bxp) from our work. This script creates the basic boxplot, we will add to it (by using the object) later.
bxp <- ggpubr::ggboxplot(Amodeo_long, x = "Wave", y = "Resilience", add = "point", xlab = "Assessment Wave", ylab = "Self-Perception of Resilience")
bxp
Amodeo_long %>%
group_by(Wave)%>%
rstatix::identify_outliers(Resilience)
#?identify_outliers
psych::describeBy(Resilience ~ Wave, mat=TRUE, data = Amodeo_long)
Amodeo_long %>%
group_by(Wave) %>%
rstatix::shapiro_test(Resilience)
ggpubr::ggqqplot(Amodeo_long, "Resilience", facet.by = "Wave")
str(Amodeo_long)
RM_AOV <- rstatix::anova_test(data = Amodeo_long, dv = Resilience, wid = ID, within = Wave)
RM_AOV
pwc <- Amodeo_long %>%
rstatix::pairwise_t_test(Resilience~Wave, paired = TRUE, p.adjust.method = "bonferroni")
pwc
pwc <- pwc %>% add_xy_position(x = "Wave")
pwc <- pwc %>% ggpubr::add_xy_position(x = "Wave")
pwc <- pwc %>% gplots::add_xy_position(x = "Wave")
pwc <- pwc %>% ggplot2::add_xy_position(x = "Wave")
?add_xy_position
pwc <- pwc %>% rstatix::add_xy_position(x = "Wave")
bxp +
ggpubr::stat_pvalue_manual(pwc) +
labs(
subtitle = get_test_label(RM_AOV, detailed = TRUE),
caption = get_pwc_label(pwc)
)
pwc <- pwc %>% rstatix::add_xy_position(x = "Wave")
bxp +
ggpubr::stat_pvalue_manual(pwc) +
labs(
subtitle = ggpubr::get_test_label(RM_AOV, detailed = TRUE),
caption = ggpubr::get_pwc_label(pwc)
)
library(ggpubr)
pwc <- pwc %>% rstatix::add_xy_position(x = "Wave")
bxp +
stat_pvalue_manual(pwc) +
labs(
subtitle =get_test_label(RM_AOV, detailed = TRUE),
caption = get_pwc_label(pwc)
)
library(ggpubr)
library(rstatix)
pwc <- pwc %>% rstatix::add_xy_position(x = "Wave")
bxp +
stat_pvalue_manual(pwc) +
labs(
subtitle =get_test_label(RM_AOV, detailed = TRUE),
caption = get_pwc_label(pwc)
)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(tidyverse)){install.packages("tidyverse")} #manipulate data
#if(!require(psych)){install.packages("psych")}
#if(!require(ggpubr)){install.packages("ggpubr")} #easy plots
#if(!require(rstatix)){install.packages("rstatix")} #pipe-friendly R functions
#if(!require(data.table)){install.packages("data.table")} #pipe-friendly R functions
#if(!require(reshape2)){install.packages("reshape2")} #pipe-friendly R functions
#if(!require(WebPower)){install.packages("WebPower")} #power analysis tools for repeated measures
#if(!require(MASS)){install.packages("MASS")} #power analysis tools for repeated measures
set.seed(2022)
ID<-factor(c(rep(seq(1,8),each=3)))#gives me 8 numbers, assigning each number 3 consecutive spots, in sequence
Resilience<-rnorm(24,mean=c(5.7,6.21,6.26),sd=c(.88,.79,.37)) #gives me a column of 24 numbers with the specified Ms and SD
Wave<-rep(c("Pre","Post", "FollowUp"),each=1,8) #repeats pre, post, follow-up once each, 8 times
Amodeo_long<-data.frame(ID, Wave, Resilience)
#OneWay_mod<-aov(Resilience~Wave + Error(ID/(Wave)), AmodeoSIM)
#summary(OneWay_mod)
#model.tables(OneWay_mod,"means")
str(Amodeo_long)
Amodeo_long$Wave <- factor(Amodeo_long$Wave, levels = c("Pre", "Post", "FollowUp"))
str(Amodeo_long)
# Create a new df (Amodeo_wide)
# Identify the original df
# We are telling it to connect the values of the Resilience variable its respective Wave designation
Amodeo_wide <- reshape2::dcast(data = Amodeo_long, formula =ID~Wave, value.var = "Resilience")
#doublecheck to see if they did what you think
str(Amodeo_wide)
Amodeo_wide$ID <- factor(Amodeo_wide$ID)
#to save the df as an .rds (think "R object") file on your computer; it should save in the same file as the .rmd file you are working with
#saveRDS(Amodeo_long, "Amodeo_longRDS.rds")
#saveRDS(Amodeo_wide, "Amodeo_wideRDS.rds")
#bring back the simulated dat from an .rds file
#Amodeo_long <- readRDS("Amodeo_longRDS.rds")
#Amodeo_wide <- readRDS("Amodeo_wideRDS.rds")
#write the simulated data  as a .csv
#write.table(Amodeo_long, file="Amodeo_longCSV.csv", sep=",", col.names=TRUE, row.names=FALSE)
#write.table(Amodeo_wide, file="Amodeo_wideCSV.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
#Amodeo_long <- read.csv ("Amodeo_longCSV.csv", header = TRUE)
#Amodeo_wide <- read.csv ("Amodeo_wideCSV.csv", header = TRUE)
str(Amodeo_long)
library(psych)
psych::describeBy(Amodeo_long$Resilience, Wave, mat = TRUE, data = Amodeo_long, digits = 3)
#Note. Recently my students and I have been having intermittent struggles with the describeBy function in the psych package. We have noticed that it is problematic when using .rds files and when using data directly imported from Qualtrics. If you are having similar difficulties, try uploading the .csv file and making the appropriate formatting changes.
psych::describe(Amodeo_wide)
boxplot (Resilience ~ Wave, data = Amodeo_long, xlab = "Wave", ylab = "Resilience", n.label = TRUE)
mean(Amodeo_long$Resilience)
library(tidyverse)
Amodeo_long <- Amodeo_long %>%
mutate(m_dev = Resilience-mean(Resilience))
head(Amodeo_long)
sum(Amodeo_long$m_dev)
Amodeo_long <- Amodeo_long %>%
mutate(m_devSQ = m_dev^2)
head(Amodeo_long)
sum(Amodeo_long$m_devSQ)
psych::describeBy(Resilience ~ ID, data = Amodeo_long, mat = TRUE, digits = 3)
(.605^2*(3-1)) + (.760^2*(3-1)) + (.992^2*(3-1))+ (.568^2*(3-1))+ (.824^2*(3-1))+ (.146^2*(3-1))+ (.248^2*(3-1)) + (.553^2*(3-1))
psych::describe(Amodeo_wide)
mean(Amodeo_long$Resilience)
(8*(6.14 - 6.017)^2) + (8*(6.33 - 6.017)^2) + (8*(5.59 - 6.017)^2)
#df is 3-1 = 2
6.636 - 2.363
16-2
11.66 - 6.64
23-16
# mean squares for the model
2.36/2
# mean squares for the residual
4.27 / 14
1.18 / .305
#looking up the F critical values
qf(.05, 2, 14, lower.tail=FALSE)#Model F critical value
#Note that we are creating an object (bxp) from our work. This script creates the basic boxplot, we will add to it (by using the object) later.
bxp <- ggpubr::ggboxplot(Amodeo_long, x = "Wave", y = "Resilience", add = "point", xlab = "Assessment Wave", ylab = "Self-Perception of Resilience")
bxp
Amodeo_long %>%
group_by(Wave)%>%
rstatix::identify_outliers(Resilience)
#?identify_outliers
psych::describeBy(Resilience ~ Wave, mat=TRUE, data = Amodeo_long)
Amodeo_long %>%
group_by(Wave) %>%
rstatix::shapiro_test(Resilience)
ggpubr::ggqqplot(Amodeo_long, "Resilience", facet.by = "Wave")
str(Amodeo_long)
RM_AOV <- rstatix::anova_test(data = Amodeo_long, dv = Resilience, wid = ID, within = Wave)
RM_AOV
pwc <- Amodeo_long %>%
rstatix::pairwise_t_test(Resilience~Wave, paired = TRUE, p.adjust.method = "bonferroni")
pwc
pwc <- pwc %>% rstatix::add_xy_position(x = "Wave")
bxp +
stat_pvalue_manual(pwc) +
labs(
subtitle = rstatix::get_test_label(RM_AOV, detailed = TRUE),
caption = rstatix:: get_pwc_label(pwc)
)
pwc <- pwc %>% rstatix::add_xy_position(x = "Wave")
bxp +
rstatix::stat_pvalue_manual(pwc) +
labs(
subtitle = rstatix::get_test_label(RM_AOV, detailed = TRUE),
caption = rstatix:: get_pwc_label(pwc)
)
pwc <- pwc %>% rstatix::add_xy_position(x = "Wave")
bxp +
ggpubr::stat_pvalue_manual(pwc) +
labs(
subtitle = rstatix::get_test_label(RM_AOV, detailed = TRUE),
caption = rstatix:: get_pwc_label(pwc)
)
citr:::insert_citation()
library(tidyverse)
set.seed(210813)#change this to any different number (and rerun the simulation) to rework the chapter problem
AttWhite<-round(c(rnorm(98,mean=76.79,sd=18.55),rnorm(95,mean=75.37,sd=18.99),rnorm(98, mean=77.47, sd=18.95), rnorm(95, mean=75.81, sd=19.29), rnorm(98, mean=77.79, sd=17.25), rnorm(95, mean=75.89, sd=19.44)),3) #sample size, M and SD for each cell; this will put it in a long file
AttWhite[AttWhite>100]<-100 #set upper bound for variable
AttWhite[AttWhite<0]<-0 #set lower bound for variable
AttArab<-round(c(rnorm(98,mean=64.11,sd=20.97),rnorm(95,mean=64.37,sd=20.03),rnorm(98, mean=64.16, sd=21.64), rnorm(95, mean=70.52, sd=18.55), rnorm(98, mean=65.29, sd=19.76), rnorm(95, mean=70.30, sd=17.98)),3)
AttArab[AttArab>100]<-100 #set upper bound for variable
AttArab[AttArab<0]<-0 #set lower bound for variable
rowID <- factor(seq(1,579))
caseID <- rep((1:193),3)
Wave <- c(rep("Baseline",193), rep("Post1", 193), rep ("Post2", 193))
COND <- c(rep("Friends", 98), rep("LittleMosque", 95), rep("Friends", 98), rep("LittleMosque", 95), rep("Friends", 98), rep("LittleMosque", 95))
Murrar_df<- data.frame(rowID, caseID, Wave, COND, AttArab, AttWhite) #groups the 3 variables into a single df:  ID#, DV, condition
#Arab_2way <- anova_test(
#data = Murrar_df, dv = AttArab, wid = caseID, #UEdf is our df, dv is our DV, wid is the participant ID
#between = COND, within = Wave # between is the between-subjects variable, within is the within subjects variable
#  )
#Arab_2way
#Diff<-round(c(rnorm(98,mean=12.68,sd=15.57),rnorm(95,mean=11.00,sd=17.25),rnorm(98, mean=13.31, sd=16.87), rnorm(95, mean=5.29, #sd=13.73), rnorm(98, mean=12.50, sd=16.24), rnorm(95, mean=5.60, sd=15.18)),3) #sample size, M and SD for each cell; this will #put it in a long file
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(lavaan)){install.packages("lavaan")}
#if(!require(semPlot)){install.packages("semPlot")}
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(psych)){install.packages("psych")}
#if(!require(jtools)){install.packages("jtools")}
#make caseID a factor
Murrar_df[,'caseID'] <- as.factor(Murrar_df[,'caseID'])
#make Wave an ordered factor
Murrar_df$Wave <- factor(Murrar_df$Wave, levels = c("Baseline", "Post1", "Post2"))
#make COND an ordered factor
Murrar_df$COND <- factor(Murrar_df$COND, levels = c("Friends", "LittleMosque"))
str(Murrar_df)
Murrar_df$Diff <- Murrar_df$AttWhite - Murrar_df$AttArab
View(Murrar_df)
psych::describeBy(Diff ~ Wave + COND, data = Murrar_df, mat=TRUE)
#Note. Recently my students and I have been having intermittent struggles with the describeBy function in the psych package. We have noticed that it is problematic when using .rds files and when using data directly imported from Qualtrics. If you are having similar difficulties, try uploading the .csv file and making the appropriate formatting changes.
CNDwiWV <- ggpubr::ggboxplot(
Murrar_df, x = "Wave", y = "Diff",
color = "COND", palette = "jco", xlab = "Assessment Wave", ylab = "Difference in Attitudes towards Whites and Arabs",
)
CNDwiWV
WVwiCND <- ggpubr::ggboxplot(
Murrar_df, x = "COND", y = "Diff",
color = "Wave", palette = "jco", xlab = "Treatment Condition", ylab = "Difference in Attitudes towards Whites and Arabs"
)
WVwiCND
Murrar_df %>%
group_by(Wave, COND) %>%
rstatix::identify_outliers(Diff)
Murrar_df %>%
group_by(Wave, COND) %>%
shapiro_test(Diff)
Murrar_df %>%
group_by(Wave, COND) %>%
rstatix::shapiro_test(Diff)
ggpubr::ggqqplot(Murrar_df, "Diff", ggtheme = theme_bw()) +  facet_grid(Wave ~ COND)
Murrar_df %>%
group_by(Wave) %>%
rstatix::levene_test(Diff ~ COND)
Murrar_df %>%
group_by(Wave) %>%
rstatix::levene_test(Diff ~ COND)
box_m(Murrar_df[, "Diff", drop = FALSE], Murrar_df$COND)
rstatix::box_m(Murrar_df[, "Diff", drop = FALSE], Murrar_df$COND)
?anova_test
Diff_2way <- rstatix::anova_test(
data = Murrar_df, dv = Diff, wid = caseID, #Murrar_df is our df, Diff is our df, wid is the caseID
between = COND, within = Wave # between is the between-subjects variable, within is the within subjects variable
)
Diff_2way
Diff_2way <- rstatix::anova_test(
data = Murrar_df, dv = Diff, wid = caseID, #Murrar_df is our df, Diff is our df, wid is the caseID
between = COND, within = Wave # between is the between-subjects variable, within is the within subjects variable
)
Diff_2way
Diff_2way <- rstatix::anova_test(
data = Murrar_df, dv = Diff, wid = caseID, #Murrar_df is our df, Diff is our df, wid is the caseID
between = COND, within = Wave # between is the between-subjects variable, within is the within subjects variable
)
Diff_2way
SimpleWave <- Murrar_df %>% #crate an object to hold the output
group_by(Wave) %>% #this group_by function is what results in three, one-way ANOVAs for each of the waves, separately
rstatix::anova_test(dv = Diff, wid = caseID, between = COND) %>% #the between = Cond means that each level of cond will be compared
get_anova_table() %>%
adjust_pvalue(method = "bonferroni") #we will get both the standard and adjusted p values
SimpleWave <- Murrar_df %>% #crate an object to hold the output
group_by(Wave) %>% #this group_by function is what results in three, one-way ANOVAs for each of the waves, separately
rstatix::anova_test(dv = Diff, wid = caseID, between = COND) %>% #the between = Cond means that each level of cond will be compared
get_anova_table() %>%
rstatix::adjust_pvalue(method = "bonferroni") #we will get both the standard and adjusted p values
SimpleWave <- Murrar_df %>% #crate an object to hold the output
group_by(Wave) %>% #this group_by function is what results in three, one-way ANOVAs for each of the waves, separately
rstatix::anova_test(dv = Diff, wid = caseID, between = COND) %>% #the between = Cond means that each level of cond will be compared
rstatix::get_anova_table() %>%
rstatix::adjust_pvalue(method = "bonferroni") #we will get both the standard and adjusted p values
SimpleWave
View(Murrar_df)
SimpleWave <- Murrar_df %>% #crate an object to hold the output
group_by(Wave) %>% #this group_by function is what results in three, one-way ANOVAs for each of the waves, separately
rstatix::anova_test(dv = Diff, wid = caseID, between = COND) %>% #the between = Cond means that each level of cond will be compared
rstatix::get_anova_table() %>%
rstatix::adjust_pvalue(method = "bonferroni") #we will get both the standard and adjusted p values
SimpleWave
SimpleCond <- Murrar_df %>%
group_by(COND) %>%
rstatix::anova_test(dv = Diff, wid = caseID, within = Wave) %>%
rstatix::get_anova_table() %>%
rstatix::adjust_pvalue(method = "bonferroni")
SimpleCond
pwcWVwiGP <- Murrar_df %>%
group_by(COND) %>%
pairwise_t_test(
Diff ~ Wave, paired = TRUE, detailed = TRUE,
p.adjust.method = "bonferroni"
) #%>%
pwcWVwiGP <- Murrar_df %>%
group_by(COND) %>%
rstatix::pairwise_t_test(
Diff ~ Wave, paired = TRUE, detailed = TRUE,
p.adjust.method = "bonferroni"
) #%>%
#select(-df, -statistic, -p) # Remove details
pwcWVwiGP
pwcWVwiGP <- Murrar_df %>%
group_by(COND) %>%
rstatix::pairwise_t_test(
Diff ~ Wave, paired = TRUE, detailed = TRUE,
rstatix::p.adjust.method = "bonferroni"
pwcWVwiGP <- Murrar_df %>%
group_by(COND) %>%
rstatix::pairwise_t_test(
Diff ~ Wave, paired = TRUE, detailed = TRUE,
p.adjust.method = "bonferroni"
) #%>%
#select(-df, -statistic, -p) # Remove details
pwcWVwiGP
Murrar_df %>%
pairwise_t_test(
Diff ~ Wave, paired = TRUE,
p.adjust.method = "bonferroni"
)
Murrar_df %>%
rstatix::pairwise_t_test(
Diff ~ Wave, paired = TRUE,
p.adjust.method = "bonferroni"
)
SimpleWave <- Murrar_df %>% #crate an object to hold the output
group_by(Wave) %>% #this group_by function is what results in three, one-way ANOVAs for each of the waves, separately
rstatix::anova_test(dv = Diff, wid = caseID, between = COND) %>% #the between = Cond means that each level of cond will be compared
rstatix::get_anova_table() %>%
adjust_pvalue(method = "bonferroni") #we will get both the standard and adjusted p values
SimpleWave <- Murrar_df %>% #crate an object to hold the output
group_by(Wave) %>% #this group_by function is what results in three, one-way ANOVAs for each of the waves, separately
rstatix::anova_test(dv = Diff, wid = caseID, between = COND) %>% #the between = Cond means that each level of cond will be compared
rstatix::get_anova_table() %>%
rstatix::adjust_pvalue(method = "bonferroni") #we will get both the standard and adjusted p values
SimpleWave
pwcWVwiGP <- pwcWVwiGP %>% add_xy_position(x = "Wave")
pwcWVwiGP <- pwcWVwiGP %>% rstatix::add_xy_position(x = "Wave")
CNDwiWV +
stat_pvalue_manual(pwcWVwiGP, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = get_test_label(Diff_2way, detailed = TRUE),
caption = get_pwc_label(pwcWVwiGP)
)
pwcWVwiGP <- pwcWVwiGP %>% rstatix::add_xy_position(x = "Wave")
CNDwiWV +
stat_pvalue_manual(pwcWVwiGP, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = get_test_label(Diff_2way, detailed = TRUE),
caption = get_pwc_label(pwcWVwiGP)
)
pwcWVwiGP <- pwcWVwiGP %>% rstatix::add_xy_position(x = "Wave")
CNDwiWV +
ggpubr::stat_pvalue_manual(pwcWVwiGP, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = get_test_label(Diff_2way, detailed = TRUE),
caption = get_pwc_label(pwcWVwiGP)
)
pwcWVwiGP <- pwcWVwiGP %>% rstatix::add_xy_position(x = "Wave")
CNDwiWV +
ggpubr::stat_pvalue_manual(pwcWVwiGP, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = ggpubr::get_test_label(Diff_2way, detailed = TRUE),
caption = get_pwc_label(pwcWVwiGP)
)
pwcWVwiGP <- pwcWVwiGP %>% rstatix::add_xy_position(x = "Wave")
CNDwiWV +
ggpubr::stat_pvalue_manual(pwcWVwiGP, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = rstatix::get_test_label(Diff_2way, detailed = TRUE),
caption = get_pwc_label(pwcWVwiGP)
)
pwcWVwiGP <- pwcWVwiGP %>% rstatix::add_xy_position(x = "Wave")
CNDwiWV +
ggpubr::stat_pvalue_manual(pwcWVwiGP, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = rstatix::get_test_label(Diff_2way, detailed = TRUE),
caption = rstatix::get_pwc_label(pwcWVwiGP)
)
pwcWVwiGP <- pwcWVwiGP %>% add_xy_position(x = "Wave") #pwcWVwiGP were my pairwise comparisons for the simple effect
pwcWVwiGP <- pwcWVwiGP %>% rstatix::add_xy_position(x = "Wave") #pwcWVwiGP were my pairwise comparisons for the simple effect
WVwiCND +  #WVwiCND was the boxplot before I did the ANOVA
ggpubr::stat_pvalue_manual(pwcWVwiGP, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = get_test_label(Diff_2way, detailed = TRUE), #UE_2way was my omnibus ANOVA model
caption = get_pwc_label(pwcWVwiGP) #and again the pairwise comparisons for the simple effect
)
pwcWVwiGP <- pwcWVwiGP %>% rstatix::add_xy_position(x = "Wave") #pwcWVwiGP were my pairwise comparisons for the simple effect
WVwiCND +  #WVwiCND was the boxplot before I did the ANOVA
ggpubr::stat_pvalue_manual(pwcWVwiGP, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = rstatix::get_test_label(Diff_2way, detailed = TRUE), #UE_2way was my omnibus ANOVA model
caption = rstatix::get_pwc_label(pwcWVwiGP) #and again the pairwise comparisons for the simple effect
)
MASS::write.matrix(pwcWVwiGP, sep = ",", file = "pwcWVwiGP.csv")
#this command can also be used to export other output
MASS::write.matrix(Diff_2way$ANOVA, sep = ",", file = "Diff_2way.csv") #can get name of specific part of object by using str(object)
MASS::write.matrix(SimpleWave, sep = ",", file = "SimpleWave.csv")
MASS::write.matrix(SimpleCond, sep = ",", file = "SimpleCond.csv")
effectsize::eta2_to_f(0.017) #interaction effect
WebPower::wp.rmanova(n=193, ng=2, nm=3, f = .1315, nscor = .99, alpha = .05, power = NULL, type = 2)
WebPower::wp.rmanova(n=193, ng=2, nm=3, f = .1315, nscor = .99, alpha = .05, power = NULL, type = 2)
wp.rmanova(n=NULL, ng=2, nm=3, f = .1315, nscor = .99, alpha = .05, power = .80, type = 2)
WebPower::wp.rmanova(n=NULL, ng=2, nm=3, f = .1315, nscor = .99, alpha = .05, power = .80, type = 2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(gplots)){install.packages("gplots")} #easy plotting for simple ANOVA
#if(!require(tidyverse)){install.packages("tidyverse")} #creating new variables and other handy functions
#if(!require(dplyr)){install.packages("dplyr")} #a specific part of the tidyverse with useful tools for manipulating data
#if(!require(psych)){install.packages("psych")} #for descriptive statistics and writing them as csv files
#if(!require(rstatix)){install.packages("rstatix")} #a number of wrappers for ANOVA models; today for evaluating the Shapiro
#if(!require(lsr)){install.packages("lsr")} #produces effect sizes
#if(!require(pwr)){install.packages("pwr")} #estimating sample sizes and power analysis
#if(!require(apaTAbles)){install.packages("apaTables")} #produces an APA style table for ANOVAs and other models
#if(!require(formattable)){install.packages("formattable")} #produces an APA style table for ANOVAs and other models
#if(!require(effectsize)){install.packages("effectsize")} #produces an APA style table for ANOVAs and other models
#Note, this script results in a different simulation than is in the ReadySetR lesson
set.seed(210820) #sets a random seed so that we get the same results each time
Accurate <- c(rnorm(30, mean=1.18, sd=0.80), rnorm(30, mean=1.83, sd = 0.58), rnorm(30, mean = 1.76, sd = 0.56))#sample size, M and SD for each group
Accurate[Accurate>3]<-3 #set upper bound for DV
Accurate[Accurate<0]<-0 #set lower bound for DV
moreTalk <- c(rnorm(30, mean=-.82, sd=0.91), rnorm(30, mean=-0.39, sd = 0.66), rnorm(30, mean = -0.04, sd = 0.71))#sample size, M and SD for each group
moreTalk[moreTalk>2]<- 2 #set upper bound for DV
moreTalk[moreTalk<-2]<- -2 #set lower bound for DV
ID<-factor(seq(1,90)) #IDs for participants
COND<-c(rep("High", 30), rep("Low", 30), rep("Control", 30)) #name factors and identify how many in each group; should be in same order as first row of script
accSIM30 <-data.frame(ID, COND, Accurate, moreTalk) #groups the 3 variables into a single df:  ID#, DV, condition
str(accSIM30)
