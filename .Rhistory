y=dnorm(x,mean=0,sd=1)
polygon(c(-3,x,3),c(0,y,0),col="#993366")
text(0,0.1,"99.7%")
#https://r-charts.com/distribution/histogram-curves/
set.seed(220821)
PhysTime <- data.frame(minutes = rnorm(200, mean=10, sd=2))
psych::describe(PhysTime$minutes)
9.9 - 1*(2)
9.9 + 1*(2)
9.9 - 2*(2)
9.9 + 2*(2)
9.9 - 3*(2)
9.9 + 3*(2)
(9.9-9.9)/2 #for 9.9 minutes
#http://rstudio-pubs-static.s3.amazonaws.com/78857_86c2403ca9c146ba8fcdcda79c3f4738.html
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-3,0,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-3,x,0),c(0,y,0),col="#993366")
arrows(.3,.2,0,0,length=.15)
text(.5,0.22,"z = 0.000")
text(-.75,0.1,"0.5000 or 50%")
text(1,0.1,"0.5000 or 50%")
(9.9-9.9)/2 #for 9.9 minutes
pnorm(0, mean=0, sd=1)
pnorm(9.9, mean=9.9, sd=2)
pnorm(0, mean=0, sd=1)
pnorm(9.9, mean=9.9, sd=2)
#calculating the z-score
(5-9.9)/2 #for 5 minutes
pnorm(-2.45, mean=0, sd=1)
pnorm(-2.45, mean=0, sd=1)
pnorm(5, mean=9.9, sd=2)
#http://rstudio-pubs-static.s3.amazonaws.com/78857_86c2403ca9c146ba8fcdcda79c3f4738.html
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-3,-2.45,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-3,x,-2.45),c(0,y,0),col="#993366")
arrows(-2.45,.2,-2.45,0,length=.15)
text(-2.45,0.22,"z = -2.45")
text(-2.3,0.1,"0.007 or .7%")
text(0,0.1,"0.993 or 99.3%")
(12-9.9)/2 #for 12 minutes
1-.8531
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(1.05,3,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(1.05,x,3),c(0,y,0),col="#993366")
arrows(.5,.2,1.05,0,length=.15)
text(.5,0.22,"z = 1.05")
text(-1,0.1,".8531 or 85%")
text(1.6,0.1,".1469 or 15%")
PhysTime$zMinutes <- (PhysTime$minutes - mean(PhysTime$minutes))/sd(PhysTime$minutes)
head(PhysTime)
PhysTime$zMinutes <- (PhysTime$minutes - mean(PhysTime$minutes))/sd(PhysTime$minutes)
head(PhysTime)
View(PhysTime)
apaTables::apa.cor.table(PhysTime)
psych::describe(PhysTime$minutes)
(9.9 - 10.5)/(2/sqrt(200))
par(mfrow=c(1,3))
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-1.96,1.96,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-1.96,x,1.96),c(0,y,0),col="#CCCCCC")
text(-2.3,0.1,"-1.96")
text(2.2,0.1,"1.96")
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
x=seq(-1.64,3,length=100)
y=dnorm(x,mean=0,sd=1)
polygon(c(-1.64,x,3),c(0,y,0),col="#CCCCCC")
text(-1.75,0.2,"-1.64")
pnorm(-4.24, mean=9.9, sd=2)
#Setting the "random" seed ensures that everyone gets the same result, every time they rerun the analysis.
#My personal practice is to create a random seed that represents the day I write up the problem (in this case August, 15, 2022)
#When the Suggestions for Practice invite you to "change the random seed," simply change this number to anything you like (maybe your birthday or today's date)
set.seed(220822)
dfOneSample <- data.frame(PhysMins = rnorm(33, mean=10, sd=2.5))
head(dfOneSample)
View(dfOneSample)
str(dfOneSample)
write.table(dfOneSample, file = "dfOneSample.csv", sep = ',', col.names=TRUE, row.names=FALSE)
#writing the simulated data as a .csv
#write.table(dfOneSample, file = "dfOneSample.csv", sep = ',', col.names=TRUE, row.names=FALSE)
#at this point you could clear your environment and then bring the data back in as a .csv
#reading the data back in as a .csv file
dfOneSample<- read.csv ('dfOneSample.csv', header = TRUE)
View(dfOneSample)
View(dfOneSample)
str(dfOneSample)
saveRDS(dfOneSample, 'dfOneSample.rds')
#saveRDS(dfOneSample, 'dfOneSample.rds')
dfOneSample <- readRDS('dfOneSample.rds')
#saveRDS(dfOneSample, 'dfOneSample.rds')
dfOneSample <- readRDS('dfOneSample.rds')
View(dfOneSample)
View(dfOneSample)
ggpubr::gghistogram(dfOneSample, x = "PhysMins",  add = "mean",  rug = TRUE, color = "#993366")
ggpubr::ggboxplot(dfOneSample$PhysMins,
ylab = "Seconds with Patient", xlab = FALSE, add="jitter"
)
psych::describe(dfOneSample$PhysMins)
(10.01 - 1.23)/(2.7/sqrt(33))
qt(p=.05/2, df=33,lower.tail=FALSE)
qt(p=.05/2, df=33,lower.tail=FALSE)
(10.01) - ((2.0369)*(2.7/sqrt(33)))
(10.01) + ((2.0369)*(2.7/sqrt(33)))
#First formula
(10.01 - 1.23)/2.7
#Second formula
18.68047/sqrt(33)
#First formula
(10.01 - 1.23)/2.7
#Second formula
18.68047/sqrt(33)
lsr::oneSampleTTest(x=dfOneSample$PhysMins, mu=1.23)
ggpubr::ggboxplot(dfOneSample$PhysMins,
ylab = "Physician Minutes", xlab = FALSE, add="jitter", title = "Figure 1. Physician Time with Patients (in minutes)"
)
pwr::pwr.t.test(d= (10.01-1.23)/2.7,n = 33, power=NULL,sig.level=0.05,type="one.sample",alternative="two.sided")
pwr::pwr.t.test(d= (10.01-1.23)/2.7, n = NULL, power=0.8,sig.level=0.05,type="one.sample",alternative="two.sided")
set.seed(220822)
rdfOneSample <- data.frame(rPhysMins = rnorm(4, mean=10, sd=2.5))
head(rdfOneSample)
lsr::oneSampleTTest(x=rdfOneSample$rPhysMins, mu=1.23)
set.seed(220822)
rdfOneSample <- data.frame(rPhysMins = rnorm(3, mean=10, sd=2.5))
head(rdfOneSample)
lsr::oneSampleTTest(x=rdfOneSample$rPhysMins, mu=1.23)
#saveRDS(dfOneSample, 'dfOneSample.rds')
dfOneSample <- readRDS('dfOneSample.rds')
ggpubr::gghistogram(dfOneSample, x = "PhysMins",  add = "mean",  rug = TRUE, color = "#993366")
ggpubr::ggboxplot(dfOneSample$PhysMins,
ylab = "Minutes with Patient", xlab = FALSE, add="jitter"
)
psych::describe(dfOneSample$PhysMins)
(10.01 - 1.23)/(2.7/sqrt(33))
qt(p=.05/2, df=32,lower.tail=FALSE)
qt(p=.05/2, df=32,lower.tail=FALSE)
(10.01) - ((2.0369)*(2.7/sqrt(33)))
(10.01) + ((2.0369)*(2.7/sqrt(33)))
#First formula
(10.01 - 1.23)/2.7
#Second formula
18.68047/sqrt(33)
#First formula
(10.01 - 1.23)/2.7
#Second formula
18.68047/sqrt(33)
lsr::oneSampleTTest(x=dfOneSample$PhysMins, mu=1.23)
ggpubr::ggboxplot(dfOneSample$PhysMins,
ylab = "Physician Minutes", xlab = FALSE, add="jitter", title = "Figure 1. Physician Time with Patients (in minutes)"
)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
2.5+11+6.5+8+11+23
set.seed(220815)
#sample size, M, and SD for Black then White patients
Verbal <- c(rnorm(33, mean=8.37, sd=3.36), rnorm(33, mean = 8.41, sd=3.21))
#set upper bound
Verbal[Verbal>27]<-27
#set lower bound
Verbal[Verbal<0]<-0
#sample size, M, and SD for Black then White patients
Nonverbal <- c(rnorm(33, mean=2.68, sd=.84), rnorm(33, mean = 2.93, sd=.77))
#set upper bound
Nonverbal[Nonverbal>5]<-5
#set lower bound
Nonverbal[Nonverbal<0]<-0
ID<-factor(seq(1,66))
#name factors and identify how many in each group; should be in same order as first row of script
PatientRace<-c(rep("Black", 33), rep("White", 33))
#groups the 3 variables into a single df:  ID#, DV, condition
dfIndSamples <-data.frame(ID, PatientRace, Verbal, Nonverbal)
str(dfIndSamples)
dfIndSamples$PatientRace <- factor(dfIndSamples$PatientRace, levels = c("Black", "White"))
str(dfIndSamples)
#writing the simulated data as a .csv
write.table(dfIndSamples, file = "dfIndSamples.csv", sep = ',', col.names=TRUE, row.names=FALSE)
#at this point you could clear your environment and then bring the data back in as a .csv
#reading the data back in as a .csv file
#dfIndSamples<- read.csv ('dfIndSamples.csv', header = TRUE)
saveRDS(dfIndSamples, 'dfIndSamples.rds')
ggpubr::ggboxplot(dfIndSamples, x = "PatientRace", y = "Verbal", color = "PatientRace", palette =c("#00AFBB", "#FC4E07"), add = "jitter")
psych::describe(dfIndSamples$Verbal)
psych::describeBy(dfIndSamples, group=PatientRace, mat=TRUE)
car::leveneTest (Verbal ~ PatientRace, dfIndSamples, center=mean)
sqrt((2.985^2/33) + (3.203^2/33))
(7.615 - 8.891)/0.762
qt(.05/2, 64, lower.tail=TRUE)
qt(.05/2, 64, lower.tail=FALSE)
qt(.05/2, 64, lower.tail=TRUE)
qt(.05/2, 64, lower.tail=FALSE)
(7.614-8.891)- (1.99773*0.762)
(7.614-8.891)+(1.99773*0.762)
lsr::independentSamplesTTest(
formula = Verbal ~PatientRace,
data = dfIndSamples,
var.equal=TRUE
)
lsr::independentSamplesTTest(
formula = Verbal ~PatientRace,
data = dfIndSamples,
var.equal=FALSE
)
apaTables::apa.1way.table(PatientRace, Verbal, dfIndSamples)
ggpubr::ggboxplot(dfIndSamples, x = "PatientRace", y = "Verbal", color = "PatientRace", palette =c("#00AFBB", "#FC4E07"), add = "jitter", title = "Figure 1. Physician Verbal Engagement as a Function of Patient Race")
pwr::pwr.t.test(d= -1.276,n = 33, power=NULL,sig.level=0.05,type="two.sample",alternative="two.sided")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(psych)){install.packages("psych")}
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(dplyr)){install.packages("dplyr")}
#if(!require(lsr)){install.packages("lsr")}
#if(!require(ggpubr)){install.packages("ggpubr")}
#if(!require(pwr)){install.packages("pwr")}
set.seed(220815)
#sample size, M, and SD for Black then White patients
Verbal <- c(rnorm(33, mean=8.37, sd=3.36), rnorm(33, mean = 8.41, sd=3.21))
#set upper bound
Verbal[Verbal>27]<-27
#set lower bound
Verbal[Verbal<0]<-0
#sample size, M, and SD for Black then White patients
Nonverbal <- c(rnorm(33, mean=2.68, sd=.84), rnorm(33, mean = 2.93, sd=.77))
#set upper bound
Nonverbal[Nonverbal>5]<-5
#set lower bound
Nonverbal[Nonverbal<0]<-0
ID<-factor(seq(1,66))
#name factors and identify how many in each group; should be in same order as first row of script
PatientRace<-c(rep("Black", 33), rep("White", 33))
#groups the 3 variables into a single df:  ID#, DV, condition
dfIndSamples <-data.frame(ID, PatientRace, Verbal, Nonverbal)
View(dfIndSamples)
str(dfIndSamples)
dfIndSamples$PatientRace <- factor(dfIndSamples$PatientRace, levels = c("Black", "White"))
str(dfIndSamples)
#writing the simulated data as a .csv
write.table(dfIndSamples, file = "dfIndSamples.csv", sep = ',', col.names=TRUE, row.names=FALSE)
#at this point you could clear your environment and then bring the data back in as a .csv
#reading the data back in as a .csv file
#dfIndSamples<- read.csv ('dfIndSamples.csv', header = TRUE)
#writing the simulated data as a .csv
#write.table(dfIndSamples, file = "dfIndSamples.csv", sep = ',', col.names=TRUE, row.names=FALSE)
#at this point you could clear your environment and then bring the data back in as a .csv
#reading the data back in as a .csv file
dfIndSamples<- read.csv ('dfIndSamples.csv', header = TRUE)
View(dfIndSamples)
str(dfIndSamples)
set.seed(220815)
#sample size, M, and SD for Black then White patients
Verbal <- c(rnorm(33, mean=8.37, sd=3.36), rnorm(33, mean = 8.41, sd=3.21))
#set upper bound
Verbal[Verbal>27]<-27
#set lower bound
Verbal[Verbal<0]<-0
#sample size, M, and SD for Black then White patients
Nonverbal <- c(rnorm(33, mean=2.68, sd=.84), rnorm(33, mean = 2.93, sd=.77))
#set upper bound
Nonverbal[Nonverbal>5]<-5
#set lower bound
Nonverbal[Nonverbal<0]<-0
ID<-factor(seq(1,66))
#name factors and identify how many in each group; should be in same order as first row of script
PatientRace<-c(rep("Black", 33), rep("White", 33))
#groups the 3 variables into a single df:  ID#, DV, condition
dfIndSamples <-data.frame(ID, PatientRace, Verbal, Nonverbal)
saveRDS(dfIndSamples, 'dfIndSamples.rds')
#saveRDS(dfIndSamples, 'dfIndSamples.rds')
dfIndSamples <- readRDS('dfIndSamples.rds')
str(dfIndSamples)
dfIndSamples$PatientRace <- factor(dfIndSamples$PatientRace, levels = c("Black", "White"))
str(dfIndSamples)
dfIndSamples$PatientRace <- factor(dfIndSamples$PatientRace, levels = c("Black", "White"))
saveRDS(dfIndSamples, 'dfIndSamples.rds')
#saveRDS(dfIndSamples, 'dfIndSamples.rds')
dfIndSamples <- readRDS('dfIndSamples.rds')
str(dfIndSamples)
ggpubr::ggboxplot(dfIndSamples, x = "PatientRace", y = "Verbal", color = "PatientRace", palette =c("#00AFBB", "#FC4E07"), add = "jitter")
psych::describe(dfIndSamples$Verbal)
psych::describeBy(dfIndSamples, group=PatientRace, mat=TRUE)
psych::describeBy(dfIndSamples, group=PatientRace, mat=TRUE)
psych::describeBy(dfIndSamples, group="PatientRace", mat=TRUE)
car::leveneTest (Verbal ~ PatientRace, dfIndSamples, center=mean)
sqrt((2.985^2/33) + (3.203^2/33))
(7.615 - 8.891)/0.762
qt(.05/2, 64, lower.tail=TRUE)
qt(.05/2, 64, lower.tail=FALSE)
qt(.05/2, 64, lower.tail=TRUE)
qt(.05/2, 64, lower.tail=FALSE)
qt(.05/2, 64, lower.tail=TRUE)
qt(.05/2, 64, lower.tail=FALSE)
(7.614-8.891)- (1.99773*0.762)
(7.614-8.891)+(1.99773*0.762)
-1.675*(sqrt((33+33)/(33*33)))
(-1.6745*-1.6745)/((-1.6745*-1.6745)+(33 + 33 -2))
lsr::independentSamplesTTest(
formula = Verbal ~PatientRace,
data = dfIndSamples,
var.equal=TRUE
)
lsr::independentSamplesTTest(
formula = Verbal ~PatientRace,
data = dfIndSamples,
var.equal=FALSE
)
apaTables::apa.1way.table(PatientRace, Verbal, dfIndSamples)
ggpubr::ggboxplot(dfIndSamples, x = "PatientRace", y = "Verbal", color = "PatientRace", palette =c("#00AFBB", "#FC4E07"), add = "jitter", title = "Figure 1. Physician Verbal Engagement as a Function of Patient Race")
pwr::pwr.t.test(d= (7.615 - 8.891)/0.762,n = 33, power=NULL,sig.level=0.05,type="two.sample",alternative="two.sided")
pwr::pwr.t.test(d= (7.615 - 8.891)/0.762,n = NULL, power=0.8,sig.level=0.05,type="two.sample",alternative="two.sided")
pwr::pwr.t.test(d= (7.615 - 8.891)/0.762,n = NULL, power=0.8,sig.level=0.05,type="two.sample",alternative="two.sided")
pwr::pwr.t.test(d= (7.615 - 8.891)/0.762,n = NULL, power=0.8,sig.level=0.05,type="two.sample",alternative="two.sided")
set.seed(220821)
#sample size, M, and SD for Black then White patients
rVerbal <- c(rnorm(7, mean=8.37, sd=3.36), rnorm(7, mean = 8.41, sd=3.21))
#set upper bound
rVerbal[rVerbal>27]<-3
#set lower bound
rVerbal[rVerbal<0]<-0
#sample size, M, and SD for Black then White patients
rNonverbal <- c(rnorm(7, mean=2.68, sd=.84), rnorm(7, mean = 2.93, sd=.77))
#set upper bound
rNonverbal[rNonverbal>5]<-5
#set lower bound
rNonverbal[rNonverbal<0]<-0
rID<-factor(seq(1,14))
#name factors and identify how many in each group; should be in same order as first row of script
rPatientRace<-c(rep("Black", 7), rep("White", 7))
#groups the 3 variables into a single df:  ID#, DV, condition
rdfIndSamples <-data.frame(rID, rPatientRace, rVerbal, rNonverbal)
rdfIndSamples$rPatientRace <- factor(rdfIndSamples$rPatientRace, levels = c("Black", "White"))
lsr::independentSamplesTTest(
formula = rVerbal ~rPatientRace,
data = rdfIndSamples,
var.equal=TRUE
)
pwr::pwr.t.test(d= ((7.615 - 8.891)/0.762),n = NULL, power=0.8,sig.level=0.05,type="two.sample",alternative="two.sided")
pwr::pwr.t.test(d= (7.615 - 8.891)/0.762,n = 33, power=NULL,sig.level=0.05,type="two.sample",alternative="two.sided")
pwr::pwr.t.test(d= ((7.615 - 8.891)/0.762),n = NULL, power=0.8,sig.level=0.05,type="two.sample",alternative="two.sided")
set.seed(220821)
#sample size, M, and SD for Black then White patients
rVerbal <- c(rnorm(7, mean=8.37, sd=3.36), rnorm(7, mean = 8.41, sd=3.21))
#set upper bound
rVerbal[rVerbal>27]<-3
#set lower bound
rVerbal[rVerbal<0]<-0
#sample size, M, and SD for Black then White patients
rNonverbal <- c(rnorm(7, mean=2.68, sd=.84), rnorm(7, mean = 2.93, sd=.77))
#set upper bound
rNonverbal[rNonverbal>5]<-5
#set lower bound
rNonverbal[rNonverbal<0]<-0
rID<-factor(seq(1,14))
#name factors and identify how many in each group; should be in same order as first row of script
rPatientRace<-c(rep("Black", 7), rep("White", 7))
#groups the 3 variables into a single df:  ID#, DV, condition
rdfIndSamples <-data.frame(rID, rPatientRace, rVerbal, rNonverbal)
rdfIndSamples$rPatientRace <- factor(rdfIndSamples$rPatientRace, levels = c("Black", "White"))
lsr::independentSamplesTTest(
formula = rVerbal ~rPatientRace,
data = rdfIndSamples,
var.equal=TRUE
)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
12+18+16
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(psych)){install.packages("psych")}
#if(!require(faux)){install.packages("faux")}
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(dplyr)){install.packages("dplyr")}
#if(!require(lsr)){install.packages("lsr")}
#if(!require(ggpubr)){install.packages("ggpubr")}
#if(!require(pwr)){install.packages("pwr")}
#if(!require(apaTables)){install.packages("apaTables")}
#if(!require(knitr)){install.packages("knitr")}
library(tidyverse)
#Setting the seed. If you choose this practice option, change the number below to something different.
set.seed(220817)
#These define the characteristics of the verbal variable. It is essential that the object names (e.g., A_mean) are not changed because they will be fed to the function in the faux package.
sub_n <- 33
A_mean <- 8.37
B_mean <- 8.41
A_sd <- 3.36
B_sd <- 3.21
AB_r <- 0.3
#the faux package can simulate a variety of data. This function within the faux package will use the objects above to simulate paired samples data
paired_V <- faux::rnorm_multi(
n = sub_n,
vars = 2,
r = AB_r,
mu = c(A_mean, B_mean),
sd = c(A_sd, B_sd),
varnames = c("Verbal_BL", "Verbal_WH")
)
paired_V <- paired_V %>% dplyr::mutate(PhysID = row_number())
#Here, I repeated the process for the nonverbal variable.
sub_n <- 33
A_mean <- 2.68
B_mean <- 2.93
A_sd <- .84
B_sd <- .77
AB_r <- 0.9
paired_NV <- faux::rnorm_multi(
n = sub_n,
vars = 2,
r = AB_r,
mu = c(A_mean, B_mean),
sd = c(A_sd, B_sd),
varnames = c("NVerb_BL", "NVerb_WH")
)
#This code produced an ID number for each physician
paired_NV <- paired_NV %>% dplyr::mutate(PhysID = row_number())
#This data joined the two sets of data.
#Note, I did not write any code that assumed tha the verbal and nonverbal data came from the same physician.  Full confession:  I'm not quite sure how to do that just yet.
dfPairedSamples <- dplyr::full_join(paired_V, paired_NV, by = c("PhysID"))
dfPairedSamples <- dfPairedSamples%>%dplyr::select(PhysID, everything())
View(dfPairedSamples)
str(dfPairedSamples)
#writing the simulated data as a .csv
write.table(dfPairedSamples, file = "dfPairedSamples.csv", sep = ',', col.names=TRUE, row.names=FALSE)
#at this point you could clear your environment and then bring the data back in as a .csv
#reading the data back in as a .csv file
#dfPairedSamples<- read.csv ('dfPairedSamples.csv', header = TRUE)
saveRDS(dfPairedSamples, 'dfPairedSamples.rds')
#saveRDS(dfPairedSamples, 'dfPairedSamples.rds')
dfPairedSamples <- readRDS('dfPairedSamples.rds')
View(dfPairedSamples)
#saveRDS(dfPairedSamples, 'dfPairedSamples.rds')
#dfPairedSamples <- readRDS('dfPairedSamples.rds')
str(dfPairedSamples)
#Creating the Verbal_D variable within the dfPairedSamples df
#Doing the "math" that informs that variable
dfPairedSamples$Verbal_D <- (dfPairedSamples$Verbal_BL - dfPairedSamples$Verbal_WH)
#Displaying the first six rows of the df to show that the difference score now exists
head(dfPairedSamples)
ggpubr::ggpaired(dfPairedSamples, cond1 = "Verbal_BL", cond2 ="Verbal_WH", color = "condition",  line.color = "gray", palette =c("npg"), xlab = "Patient Race", ylab = "Verbal Communication Rating")
ggpubr::ggpaired(dfPairedSamples, cond1 = "Verbal_BL", cond2 ="Verbal_WH", color = "condition",  line.color = "gray", palette =c("npg"), xlab = "Patient Race", ylab = "Verbal Communication Rating", add = "jitter")
ggpubr::ggpaired(dfPairedSamples, cond1 = "Verbal_BL", cond2 ="Verbal_WH", color = "condition",  line.color = "gray", palette =c("npg"), xlab = "Patient Race", ylab = "Verbal Communication Rating")
psych::describe(dfPairedSamples)
.08/(4.14/sqrt(33))
qt(.05/2, 32, lower.tail=TRUE)
qt(.05/2, 32, lower.tail=FALSE)
qt(.05/2, 32, lower.tail=TRUE)
qt(.05/2, 32, lower.tail=FALSE)
qt(.05/2, 32, lower.tail=TRUE)
qt(.05/2, 32, lower.tail=FALSE)
qt(.05/2, 32, lower.tail=TRUE)
qt(.05/2, 32, lower.tail=FALSE)
.08-(2.037*((4.14/(sqrt(33)))))
.08+(2.037*((4.14/sqrt(33))))
.08/4.14
0.111/(sqrt(33))
(33*(.08^2))/((33*(.08^2)) + ((33-1)*(4.14^2)))
(0.111^2)/((0.111^2)+(33-1))
lsr::pairedSamplesTTest(
formula = ~Verbal_BL + Verbal_WH,
data = dfPairedSamples
)
library(tidyverse)#needed to use the pipe
#Creating a smaller df to include only the variables I want in the table
PairedDescripts <- dfPairedSamples%>%
select(Verbal_BL, Verbal_WH, Verbal_D)
#using the apa.cor.table function for means, standard deviations, and correlations
#the filename command will write the table as a word document to your file
apaTables::apa.cor.table(PairedDescripts, table.number=1, filename="Tab1_PairedV.doc")
ggpubr::ggpaired(dfPairedSamples, cond1 = "Verbal_BL", cond2 ="Verbal_WH", color = "condition",  line.color = "gray", palette =c("npg"), xlab = "Patient Race", ylab = "Verbal Communication Rating", title = "Figure 1. Physician Verbal Engagement as a Function of Patient Race")
pwr::pwr.t.test(d=(0-.08)/4.14,n = 33, power=NULL,sig.level=0.05,type="paired",alternative="two.sided")
pwr::pwr.t.test(d=(.08)/4.14,n = NULL, power=0.8,sig.level=0.05,type="paired",alternative="two.sided")
pwr::pwr.t.test(d=(.08)/4.14,n = 33, power=NULL,sig.level=0.05,type="paired",alternative="two.sided")
pwr::pwr.t.test(d=(.08)/4.14,n = NULL, power=0.8,sig.level=0.05,type="paired",alternative="two.sided")
pwr::pwr.t.test(d=(.08)/4.14,n = NULL, power=0.8,sig.level=0.05,type="paired",alternative="two.sided")
set.seed(220820)
#These define the characteristics of the verbal variable. It is essential that the object names (e.g., A_mean) are not changed because they will be fed to the function in the faux package.
sub_n <- 21022
A_mean <- 8.37
B_mean <- 8.41
A_sd <- 3.36
B_sd <- 3.21
AB_r <- 0.3
#the faux package can simulate a variety of data. This function within the faux package will use the objects above to simulate paired samples data
paired_V2 <- faux::rnorm_multi(
n = sub_n,
vars = 2,
r = AB_r,
mu = c(A_mean, B_mean),
sd = c(A_sd, B_sd),
varnames = c("Verbal_BL", "Verbal_WH")
)
lsr::pairedSamplesTTest(
formula = ~Verbal_BL + Verbal_WH,
data = paired_V2
)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
15+7+11
