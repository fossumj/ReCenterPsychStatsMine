Verbal[Verbal<0]<-0
#sample size, M, and SD for Black then White patients
Nonverbal <- c(rnorm(33, mean=2.68, sd=.84), rnorm(33, mean = 2.93, sd=.77))
#set upper bound
Nonverbal[Verbal>5]<-5
#set lower bound
Nonverbal[Verbal<0]<-0
ID<-factor(seq(1,66))
#name factors and identify how many in each group; should be in same order as first row of script
PatientRace<-c(rep("Black", 33), rep("White", 33))
#groups the 3 variables into a single df:  ID#, DV, condition
dfIndSamples <-data.frame(ID, PatientRace, Verbal, Nonverbal)
str(dfIndSamples)
dfIndSamples$PatientRace <- factor(dfIndSamples$PatientRace, levels = c("Black", "White"))
str(dfIndSamples)
saveRDS(dfIndSamples, 'dfIndSamples.rds')
#saveRDS(dfIndSamples, 'dfIndSamples.rds')
dfIndSamples <- readRDS('dfIndSamples.rds')
str(dfIndSamples)
ggpubr::ggboxplot(dfIndSamples, x = "PatientRace", y = "Verbal", color = "PatientRace", palette =c("#00AFBB", "#FC4E07"), add = "jitter")
psych::describe(dfIndSamples$Verbal)
psych::describeBy(dfIndSamples, group=PatientRace, mat=TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
if(!require(psych)){install.packages("psych")}
if(!require(faux)){install.packages("faux")}
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(lsr)){install.packages("lsr")}
if(!require(ggpubr)){install.packages("ggpubr")}
set.seed(220815)
#sample size, M, and SD for Black then White patients
Verbal <- c(rnorm(33, mean=8.37, sd=3.36), rnorm(33, mean = 8.41, sd=3.21))
#set upper bound
Verbal[Verbal>27]<-3
#set lower bound
Verbal[Verbal<0]<-0
#sample size, M, and SD for Black then White patients
Nonverbal <- c(rnorm(33, mean=2.68, sd=.84), rnorm(33, mean = 2.93, sd=.77))
#set upper bound
Nonverbal[Verbal>5]<-5
#set lower bound
Nonverbal[Verbal<0]<-0
ID<-factor(seq(1,66))
#name factors and identify how many in each group; should be in same order as first row of script
PatientRace<-c(rep("Black", 33), rep("White", 33))
#groups the 3 variables into a single df:  ID#, DV, condition
dfIndSamples <-data.frame(ID, PatientRace, Verbal, Nonverbal)
str(dfIndSamples)
dfIndSamples$PatientRace <- factor(dfIndSamples$PatientRace, levels = c("Black", "White"))
str(dfIndSamples)
#writing the simulated data as a .csv
#write.table(dfIndSamples, file = "dfIndSamples.csv", sep = ',', col.names=TRUE, row.names=FALSE)
#at this point you could clear your environment and then bring the data back in as a .csv
#reading the data back in as a .csv file
#dfIndSamples<- read.csv ('dfIndSamples.csv', header = TRUE)
#saveRDS(dfIndSamples, 'dfIndSamples.rds')
#dfIndSamples <- readRDS('dfIndSamples.rds')
ggpubr::ggboxplot(dfIndSamples, x = "PatientRace", y = "Verbal", color = "PatientRace", palette =c("#00AFBB", "#FC4E07"), add = "jitter")
psych::describeBy(dfIndSamples, group=PatientRace, mat=TRUE)
sqrt((2.985^2/33) + (3.203^2/33))
qt(.05/2, 31, lower.tail=TRUE)
qt(.05/2, 31, lower.tail=FALSE)
qt(.05/2, 64, lower.tail=TRUE)
qt(.05/2, 64, lower.tail=FALSE)
qt(.05/2, 64, lower.tail=TRUE)
qt(.05/2, 64, lower.tail=FALSE)
(7.61-8.89)- (1.998*0.762)
(7.61-8.89)+(1.998*0.762)
lsr::independentSamplesTTest(
formula = Verbal ~PatientRace,
data = dfIndSamples,
var.equal=TRUE
)
(7.614-8.891)- (1.998*0.762)
(7.614-8.891)+(1.998*0.762)
(7.614-8.891)- (1.99773*0.762)
(7.614-8.891)+(1.99773*0.762)
lsr::independentSamplesTTest(
formula = Verbal ~PatientRace,
data = dfIndSamples,
var.equal=FALSE
)
lsr::independentSamplesTTest(
formula = Verbal ~PatientRace,
data = dfIndSamples,
var.equal=FALSE
)
apaTables::apa.1way.table(PatientRace, Verbal, dfIndSamples)
ggpubr::ggboxplot(dfIndSamples, x = "PatientRace", y = "Verbal", color = "PatientRace", palette =c("#00AFBB", "#FC4E07"), add = "jitter")
pwr::pwr.t.test(d= 7.615,n = 60, power=NULL,sig.level=0.05,type="paired",alternative="two.sided")
pwr::pwr.t.test(d= 7.615,n = 30, power=NULL,sig.level=0.05,type="paired",alternative="two.sided")
pwr::pwr.t.test(d= 7.615,n = 30, power=NULL,sig.level=0.05,type="paired",alternative="two.sided")
7.615 - 8.891
pwr::pwr.t.test(d= -1.276,n = 30, power=NULL,sig.level=0.05,type="paired",alternative="two.sided")
pwr::pwr.t.test(d=(-1.276,n = NULL, power=0.8,sig.level=0.05,type="paired",alternative="two.sided")
pwr::pwr.t.test(d=-1.276,n = NULL, power=0.8,sig.level=0.05,type="paired",alternative="two.sided")
pwr::pwr.t.test(d= 1.276,n = NULL, power=0.8,sig.level=0.05,type="paired",alternative="two.sided")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
if(!require(psych)){install.packages("psych")}
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(lsr)){install.packages("lsr")}
if(!require(ggpubr)){install.packages("ggpubr")}
set.seed(220815)
#sample size, M, and SD for Black then White patients
Verbal <- c(rnorm(33, mean=8.37, sd=3.36), rnorm(33, mean = 8.41, sd=3.21))
#set upper bound
Verbal[Verbal>27]<-3
#set lower bound
Verbal[Verbal<0]<-0
#sample size, M, and SD for Black then White patients
Nonverbal <- c(rnorm(33, mean=2.68, sd=.84), rnorm(33, mean = 2.93, sd=.77))
#set upper bound
Nonverbal[NonVerbal>5]<-5
set.seed(220815)
#sample size, M, and SD for Black then White patients
Verbal <- c(rnorm(33, mean=8.37, sd=3.36), rnorm(33, mean = 8.41, sd=3.21))
#set upper bound
Verbal[Verbal>27]<-3
#set lower bound
Verbal[Verbal<0]<-0
#sample size, M, and SD for Black then White patients
Nonverbal <- c(rnorm(33, mean=2.68, sd=.84), rnorm(33, mean = 2.93, sd=.77))
#set upper bound
Nonverbal[Nonverbal>5]<-5
#set lower bound
Nonverbal[Nonverbal<0]<-0
ID<-factor(seq(1,66))
#name factors and identify how many in each group; should be in same order as first row of script
PatientRace<-c(rep("Black", 33), rep("White", 33))
#groups the 3 variables into a single df:  ID#, DV, condition
dfIndSamples <-data.frame(ID, PatientRace, Verbal, Nonverbal)
str(dfIndSamples)
dfIndSamples$PatientRace <- factor(dfIndSamples$PatientRace, levels = c("Black", "White"))
str(dfIndSamples)
ggpubr::ggboxplot(dfIndSamples, x = "PatientRace", y = "Verbal", color = "PatientRace", palette =c("#00AFBB", "#FC4E07"), add = "jitter")
psych::describe(dfIndSamples$Verbal)
psych::describeBy(dfIndSamples, group=PatientRace, mat=TRUE)
car::leveneTest (Verbal ~ PatientRace, dfIndSamples, center=mean)
sqrt((2.985^2/33) + (3.203^2/33))
(7.615 - 8.891)/0.762
qt(.05/2, 64, lower.tail=TRUE)
qt(.05/2, 64, lower.tail=FALSE)
qt(.05/2, 64, lower.tail=TRUE)
qt(.05/2, 64, lower.tail=FALSE)
(7.614-8.891)- (1.99773*0.762)
(7.614-8.891)+(1.99773*0.762)
-1.675*(sqrt((33+33)/(33*33)))
(-1.6745*-1.6745)/((-1.6745*-1.6745)+(33 + 33 -2))
lsr::independentSamplesTTest(
formula = Verbal ~PatientRace,
data = dfIndSamples,
var.equal=TRUE
)
lsr::independentSamplesTTest(
formula = Verbal ~PatientRace,
data = dfIndSamples,
var.equal=FALSE
)
apaTables::apa.1way.table(PatientRace, Verbal, dfIndSamples)
ggpubr::ggboxplot(dfIndSamples, x = "PatientRace", y = "Verbal", color = "PatientRace", palette =c("#00AFBB", "#FC4E07"), add = "jitter")
pwr::pwr.t.test(d= -1.276,n = 30, power=NULL,sig.level=0.05,type="paired",alternative="two.sided")
pwr::pwr.t.test(d= 1.276,n = NULL, power=0.8,sig.level=0.05,type="paired",alternative="two.sided")
set.seed(220820)
#sample size, M, and SD for Black then White patients
rVerbal <- c(rnorm(7, mean=8.37, sd=3.36), rnorm(7, mean = 8.41, sd=3.21))
#set upper bound
rVerbal[rVerbal>27]<-3
#set lower bound
rVerbal[rVerbal<0]<-0
#sample size, M, and SD for Black then White patients
rNonverbal <- c(rnorm(7, mean=2.68, sd=.84), rnorm(7, mean = 2.93, sd=.77))
#set upper bound
rNonverbal[rNonVerbal>5]<-5
set.seed(220820)
#sample size, M, and SD for Black then White patients
rVerbal <- c(rnorm(7, mean=8.37, sd=3.36), rnorm(7, mean = 8.41, sd=3.21))
#set upper bound
rVerbal[rVerbal>27]<-3
#set lower bound
rVerbal[rVerbal<0]<-0
#sample size, M, and SD for Black then White patients
rNonverbal <- c(rnorm(7, mean=2.68, sd=.84), rnorm(7, mean = 2.93, sd=.77))
#set upper bound
rNonverbal[rNonverbal>5]<-5
#set lower bound
rNonverbal[rNonverbal<0]<-0
rID<-factor(seq(1,66))
#name factors and identify how many in each group; should be in same order as first row of script
rPatientRace<-c(rep("Black", 7), rep("White", 7))
#groups the 3 variables into a single df:  ID#, DV, condition
rdfIndSamples <-data.frame(ID, PatientRace, Verbal, Nonverbal)
lsr::independentSamplesTTest(
formula = Verbal ~PatientRace,
data = rdfIndSamples,
var.equal=TRUE
)
View(rdfIndSamples)
set.seed(220820)
#sample size, M, and SD for Black then White patients
rVerbal <- c(rnorm(7, mean=8.37, sd=3.36), rnorm(7, mean = 8.41, sd=3.21))
#set upper bound
rVerbal[rVerbal>27]<-3
#set lower bound
rVerbal[rVerbal<0]<-0
#sample size, M, and SD for Black then White patients
rNonverbal <- c(rnorm(7, mean=2.68, sd=.84), rnorm(7, mean = 2.93, sd=.77))
#set upper bound
rNonverbal[rNonverbal>5]<-5
#set lower bound
rNonverbal[rNonverbal<0]<-0
rID<-factor(seq(1,66))
#name factors and identify how many in each group; should be in same order as first row of script
rPatientRace<-c(rep("Black", 7), rep("White", 7))
#groups the 3 variables into a single df:  ID#, DV, condition
rdfIndSamples <-data.frame(ID, rPatientRace, rVerbal, rNonverbal)
set.seed(220820)
#sample size, M, and SD for Black then White patients
rVerbal <- c(rnorm(7, mean=8.37, sd=3.36), rnorm(7, mean = 8.41, sd=3.21))
#set upper bound
rVerbal[rVerbal>27]<-3
#set lower bound
rVerbal[rVerbal<0]<-0
#sample size, M, and SD for Black then White patients
rNonverbal <- c(rnorm(7, mean=2.68, sd=.84), rnorm(7, mean = 2.93, sd=.77))
#set upper bound
rNonverbal[rNonverbal>5]<-5
#set lower bound
rNonverbal[rNonverbal<0]<-0
rID<-factor(seq(1,66))
#name factors and identify how many in each group; should be in same order as first row of script
rPatientRace<-c(rep("Black", 7), rep("White", 7))
#groups the 3 variables into a single df:  ID#, DV, condition
rdfIndSamples <-data.frame(rID, rPatientRace, rVerbal, rNonverbal)
set.seed(220820)
#sample size, M, and SD for Black then White patients
rVerbal <- c(rnorm(7, mean=8.37, sd=3.36), rnorm(7, mean = 8.41, sd=3.21))
#set upper bound
rVerbal[rVerbal>27]<-3
#set lower bound
rVerbal[rVerbal<0]<-0
#sample size, M, and SD for Black then White patients
rNonverbal <- c(rnorm(7, mean=2.68, sd=.84), rnorm(7, mean = 2.93, sd=.77))
#set upper bound
rNonverbal[rNonverbal>5]<-5
#set lower bound
rNonverbal[rNonverbal<0]<-0
rID<-factor(seq(1,14))
#name factors and identify how many in each group; should be in same order as first row of script
rPatientRace<-c(rep("Black", 7), rep("White", 7))
#groups the 3 variables into a single df:  ID#, DV, condition
rdfIndSamples <-data.frame(rID, rPatientRace, rVerbal, rNonverbal)
lsr::independentSamplesTTest(
formula = Verbal ~PatientRace,
data = rdfIndSamples,
var.equal=TRUE
)
lsr::independentSamplesTTest(
formula = rVerbal ~rPatientRace,
data = rdfIndSamples,
var.equal=TRUE
)
rdfIndSamples$rPatientRace <- factor(rdfIndSamples$rPatientRace, levels = c("Black", "White"))
lsr::independentSamplesTTest(
formula = rVerbal ~rPatientRace,
data = rdfIndSamples,
var.equal=TRUE
)
pwr::pwr.t.test(d= 1.276,n = NULL, power=0.8,sig.level=0.05,type="paired",alternative="two.sided")
View(rdfIndSamples)
set.seed(220821)
#sample size, M, and SD for Black then White patients
rVerbal <- c(rnorm(7, mean=8.37, sd=3.36), rnorm(7, mean = 8.41, sd=3.21))
#set upper bound
rVerbal[rVerbal>27]<-3
#set lower bound
rVerbal[rVerbal<0]<-0
#sample size, M, and SD for Black then White patients
rNonverbal <- c(rnorm(7, mean=2.68, sd=.84), rnorm(7, mean = 2.93, sd=.77))
#set upper bound
rNonverbal[rNonverbal>5]<-5
#set lower bound
rNonverbal[rNonverbal<0]<-0
rID<-factor(seq(1,14))
#name factors and identify how many in each group; should be in same order as first row of script
rPatientRace<-c(rep("Black", 7), rep("White", 7))
#groups the 3 variables into a single df:  ID#, DV, condition
rdfIndSamples <-data.frame(rID, rPatientRace, rVerbal, rNonverbal)
rdfIndSamples$rPatientRace <- factor(rdfIndSamples$rPatientRace, levels = c("Black", "White"))
lsr::independentSamplesTTest(
formula = rVerbal ~rPatientRace,
data = rdfIndSamples,
var.equal=TRUE
)
pwr::pwr.t.test(d= (0-1.276)/0.762,n = NULL, power=0.8,sig.level=0.05,type="paired",alternative="two.sided")
pwr::pwr.t.test(d= (7.615-8.891)/0.762,n = NULL, power=0.8,sig.level=0.05,type="paired",alternative="two.sided")
pwr.t.test(d=(0-10)/16.03,power=.8,sig.level=.05,type="two.sample",alternative="two.sided")
pwr::pwr.t.test(d=(0-10)/16.03,power=.8,sig.level=.05,type="two.sample",alternative="two.sided")
pwr::pwr.t.test(d= -1.276,n = NULL, power=.8,sig.level=0.05,type="paired",alternative="two.sided")
pwr::pwr.t.test(d= -1.276,n = NULL, power=.8,sig.level=0.05,type="two.sample",alternative="two.sided")
pwr::pwr.t.test(d= (7.615-8.891)/0.762,n = NULL, power=0.8,sig.level=0.05,type="two.sample",alternative="two.sided")
pwr::pwr.t.test(d= -1.276,n = NULL, power=.8,sig.level=0.05,type="two.sample",alternative="two.sided")
pwr::pwr.t.test(d= -1.276,n = 33, power=NULL,sig.level=0.05,type="two.sample",alternative="two.sided")
pwr::pwr.t.test(d= -1.276,n = NULL, power=0.8,sig.level=0.05,type="two.sample",alternative="two.sided")
set.seed(220821)
#sample size, M, and SD for Black then White patients
rVerbal <- c(rnorm(11, mean=8.37, sd=3.36), rnorm(11, mean = 8.41, sd=3.21))
#set upper bound
rVerbal[rVerbal>27]<-3
#set lower bound
rVerbal[rVerbal<0]<-0
#sample size, M, and SD for Black then White patients
rNonverbal <- c(rnorm(11, mean=2.68, sd=.84), rnorm(11, mean = 2.93, sd=.77))
#set upper bound
rNonverbal[rNonverbal>5]<-5
#set lower bound
rNonverbal[rNonverbal<0]<-0
rID<-factor(seq(1,22))
#name factors and identify how many in each group; should be in same order as first row of script
rPatientRace<-c(rep("Black", 11), rep("White", 11))
#groups the 3 variables into a single df:  ID#, DV, condition
rdfIndSamples <-data.frame(rID, rPatientRace, rVerbal, rNonverbal)
rdfIndSamples$rPatientRace <- factor(rdfIndSamples$rPatientRace, levels = c("Black", "White"))
lsr::independentSamplesTTest(
formula = rVerbal ~rPatientRace,
data = rdfIndSamples,
var.equal=TRUE
)
#Setting the "random" seed ensures that everyone gets the same result, every time they rerun the analysis.
#My personal practice is to create a random seed that represents the day I write up the problem (in this case August, 15, 2022)
#When the Suggestions for Practice invite you to "change the random seed," simply change this number to anything you like (maybe your birthday or today's date)
set.seed(220815)
#Assigns as physician ID number to each row
#Simulates 33 numbers between 220 and 1213
dfOneSample <- data.frame(
ID = factor(seq(1:33)),
PhysicianSeconds = sample(220: 1213,33, replace=TRUE)
)
#Displays the first 6 rows of the df
head(dfOneSample)
View(dfOneSample)
str$dfOneSample
str(dfOneSample)
#writing the simulated data as a .csv
write.table(dfOneSample, file = "dfOneSample.csv", sep = ',', col.names=TRUE, row.names=FALSE)
#writing the simulated data as a .csv
#write.table(dfOneSample, file = "dfOneSample.csv", sep = ',', col.names=TRUE, row.names=FALSE)
#at this point you could clear your environment and then bring the data back in as a .csv
#reading the data back in as a .csv file
dfOneSample<- read.csv ('dfOneSample.csv', header = TRUE)
View(dfOneSample)
saveRDS(dfOneSample, 'dfOneSample.rds')
#saveRDS(dfOneSample, 'dfOneSample.rds')
dfOneSample <- readRDS('dfOneSample.rds')
View(dfOneSample)
ggpubr::gghistogram(dfOneSample, x = "PhysicianSeconds",  add = "mean",  rug = TRUE)
ggpubr::ggboxplot(dfOneSample$PhysicianSeconds,
ylab = "Seconds with Patient", xlab = FALSE,
)
ggpubr::ggboxplot(dfOneSample$PhysicianSeconds,
ylab = "Seconds with Patient", xlab = FALSE, jitter=TRUE
)
ggpubr::ggboxplot(dfOneSample$PhysicianSeconds,
ylab = "Seconds with Patient", xlab = FALSE, add="jitter"
)
ggpubr::ggboxplot(dfOneSample$PhysicianSeconds,
ylab = "Seconds with Patient", xlab = FALSE, add="jitter", palette ="#00AFBB"
)
ggpubr::ggboxplot(dfOneSample$PhysicianSeconds,
ylab = "Seconds with Patient", xlab = FALSE, add="jitter", palette =c("#00AFBB")
)
ggpubr::ggboxplot(dfOneSample$PhysicianSeconds,
ylab = "Seconds with Patient", xlab = FALSE, add="jitter"
)
psych::describe(dfOneSample$PhysicianSeconds)
psych::describe(dfOneSample$PhysicianSeconds)
(717.12 - 73.5)/(312.22/sqrt(33))
qt(p=.05/2, df=33,lower.tail=FALSE)
lsr::oneSampleTTest(x=dfOneSample$PhysicianSeconds, mu=73.5)
(312.22/sqrt(33))
qt(p=.05/2, df=33,lower.tail=FALSE)
(717.12-73.5) - (2.0345)*(312.22/sqrt(33))
(717.12-73.5) - (2.0345)*(312.22/sqrt(33))
(717.12-73.5) + (2.0345)*(312.22/sqrt(33))
(717.12-73.5) - ((2.0345)*(312.22/sqrt(33)))
(717.12-73.5) + ((2.0345)*(312.22/sqrt(33)))
(717.12-73.5) - ((2.0345)*(312.22/sqrt(33)))
(717.12-73.5) + ((2.0345)*(312.22/sqrt(33)))
qt(p=.05/2, df=32,lower.tail=FALSE)
(717.12-73.5) - ((2.0369)*(312.22/sqrt(33)))
(717.12-73.5) + ((2.0369)*(312.22/sqrt(33)))
(717.12-73.5) - ((2.0369^2)*(312.22/sqrt(33)))
(717.12-73.5) + ((2.0369^2)*(312.22/sqrt(33)))
(717.12-73.5) - ((2.0369)*(312.22/sqrt(33)))
(717.12-73.5) + ((2.0369)*(312.22/sqrt(33)))
(717.12-73.5) - ((2.0369)*(312.22^2/sqrt(33)))
(717.12-73.5) + ((2.0369)*(312.22^2/sqrt(33)))
(717.12) - ((2.0369)*(312.22/sqrt(33)))
(717.12) + ((2.0369)*(312.22/sqrt(33)))
#First formula
(717.12 - 73.5)/312.22
#Second formula
11.842/sqrt(33)
#t.values <- seq(-4, 4, .1)
#plot(x = t.values,y = dt(t.values,3), type = "l", lty = "dotted", ylim = c(0,.4), xlab = "t", ylab = "f(t)")
#plot + lines(t.values,dt(t.values,10),lty = "dashed") lines(t.values,dnorm(t.values))
lsr::oneSampleTTest(x=dfOneSample$PhysicianSeconds, mu=73.5)
ggpubr::ggboxplot(dfOneSample$PhysicianSeconds,
ylab = "Seconds with Patient", xlab = FALSE, add="jitter", title = "Figure 1. Physician Time with Patients (in seconds)"
)
ggpubr::ggboxplot(dfIndSamples, x = "PatientRace", y = "Verbal", color = "PatientRace", palette =c("#00AFBB", "#FC4E07"), add = "jitter", title = "Figure 1. Physician Verbal Engagement as a Function of Patient Race")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(psych)){install.packages("psych")}
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(dplyr)){install.packages("dplyr")}
#if(!require(lsr)){install.packages("lsr")}
#if(!require(ggpubr)){install.packages("ggpubr")}
#if(!require(pwr)){install.packages("pwr")}
set.seed(220815)
#sample size, M, and SD for Black then White patients
Verbal <- c(rnorm(33, mean=8.37, sd=3.36), rnorm(33, mean = 8.41, sd=3.21))
#set upper bound
Verbal[Verbal>27]<-3
#set lower bound
Verbal[Verbal<0]<-0
#sample size, M, and SD for Black then White patients
Nonverbal <- c(rnorm(33, mean=2.68, sd=.84), rnorm(33, mean = 2.93, sd=.77))
#set upper bound
Nonverbal[Nonverbal>5]<-5
#set lower bound
Nonverbal[Nonverbal<0]<-0
ID<-factor(seq(1,66))
#name factors and identify how many in each group; should be in same order as first row of script
PatientRace<-c(rep("Black", 33), rep("White", 33))
#groups the 3 variables into a single df:  ID#, DV, condition
dfIndSamples <-data.frame(ID, PatientRace, Verbal, Nonverbal)
str(dfIndSamples)
dfIndSamples$PatientRace <- factor(dfIndSamples$PatientRace, levels = c("Black", "White"))
str(dfIndSamples)
#writing the simulated data as a .csv
#write.table(dfIndSamples, file = "dfIndSamples.csv", sep = ',', col.names=TRUE, row.names=FALSE)
#at this point you could clear your environment and then bring the data back in as a .csv
#reading the data back in as a .csv file
#dfIndSamples<- read.csv ('dfIndSamples.csv', header = TRUE)
#saveRDS(dfIndSamples, 'dfIndSamples.rds')
#dfIndSamples <- readRDS('dfIndSamples.rds')
ggpubr::ggboxplot(dfIndSamples, x = "PatientRace", y = "Verbal", color = "PatientRace", palette =c("#00AFBB", "#FC4E07"), add = "jitter")
psych::describe(dfIndSamples$Verbal)
psych::describeBy(dfIndSamples, group=PatientRace, mat=TRUE)
car::leveneTest (Verbal ~ PatientRace, dfIndSamples, center=mean)
sqrt((2.985^2/33) + (3.203^2/33))
(7.615 - 8.891)/0.762
qt(.05/2, 64, lower.tail=TRUE)
qt(.05/2, 64, lower.tail=FALSE)
qt(.05/2, 64, lower.tail=TRUE)
qt(.05/2, 64, lower.tail=FALSE)
(7.614-8.891)- (1.99773*0.762)
(7.614-8.891)+(1.99773*0.762)
-1.675*(sqrt((33+33)/(33*33)))
(-1.6745*-1.6745)/((-1.6745*-1.6745)+(33 + 33 -2))
lsr::independentSamplesTTest(
formula = Verbal ~PatientRace,
data = dfIndSamples,
var.equal=TRUE
)
lsr::independentSamplesTTest(
formula = Verbal ~PatientRace,
data = dfIndSamples,
var.equal=FALSE
)
apaTables::apa.1way.table(PatientRace, Verbal, dfIndSamples)
ggpubr::ggboxplot(dfIndSamples, x = "PatientRace", y = "Verbal", color = "PatientRace", palette =c("#00AFBB", "#FC4E07"), add = "jitter", title = "Figure 1. Physician Verbal Engagement as a Function of Patient Race")
pwr::pwr.t.test(d= (717.121-73.5)/312.216),n = 33, power=NULL,sig.level=0.05,type="two.sample",alternative="two.sided")
pwr::pwr.t.test(d= (717.121-73.5)/312.216,n = 33, power=NULL,sig.level=0.05,type="two.sample",alternative="two.sided")
pwr::pwr.t.test(d= (717.121-73.5)/312.216,n = 33, power=NULL,sig.level=0.05,type="one.sample",alternative="two.sided")
pwr::pwr.t.test(d= (717.121-73.5)/312.216,n = 33,n = NULL, power=0.8,sig.level=0.05,type="one.samp.e",alternative="two.sided")
pwr::pwr.t.test(d= (717.121-73.5)/312.216, n = NULL, power=0.8,sig.level=0.05,type="one.samp.e",alternative="two.sided")
pwr::pwr.t.test(d= (717.121-73.5)/312.216, n = NULL, power=0.8,sig.level=0.05,type="one.sample",alternative="two.sided")
#Setting the "random" seed ensures that everyone gets the same result, every time they rerun the analysis.
#My personal practice is to create a random seed that represents the day I write up the problem (in this case August, 15, 2022)
#When the Suggestions for Practice invite you to "change the random seed," simply change this number to anything you like (maybe your birthday or today's date)
set.seed(220820)
#Assigns as physician ID number to each row
#Simulates 33 numbers between 220 and 1213
rdfOneSample <- data.frame(
ID = factor(seq(1:4)),
PhysicianSeconds = sample(220: 1213,4, replace=TRUE)
)
#Displays the first 6 rows of the df
head(rdfOneSample)
#Setting the "random" seed ensures that everyone gets the same result, every time they rerun the analysis.
#My personal practice is to create a random seed that represents the day I write up the problem (in this case August, 15, 2022)
#When the Suggestions for Practice invite you to "change the random seed," simply change this number to anything you like (maybe your birthday or today's date)
set.seed(220820)
#Assigns as physician ID number to each row
#Simulates 33 numbers between 220 and 1213
rdfOneSample <- data.frame(
ID = factor(seq(1:4)),
PhysicianSeconds = sample(220: 1213,4, replace=TRUE)
)
#Displays the first 6 rows of the df
head(rdfOneSample)
lsr::oneSampleTTest(x=rdfOneSample$PhysicianSeconds, mu=73.5)
