caption = rstatix:: get_pwc_label(pwc)
)
pwc <- pwc %>% rstatix::add_xy_position(x = "Wave")
bxp +
rstatix::stat_pvalue_manual(pwc) +
labs(
subtitle = rstatix::get_test_label(RM_AOV, detailed = TRUE),
caption = rstatix:: get_pwc_label(pwc)
)
pwc <- pwc %>% rstatix::add_xy_position(x = "Wave")
bxp +
ggpubr::stat_pvalue_manual(pwc) +
labs(
subtitle = rstatix::get_test_label(RM_AOV, detailed = TRUE),
caption = rstatix:: get_pwc_label(pwc)
)
citr:::insert_citation()
library(tidyverse)
set.seed(210813)#change this to any different number (and rerun the simulation) to rework the chapter problem
AttWhite<-round(c(rnorm(98,mean=76.79,sd=18.55),rnorm(95,mean=75.37,sd=18.99),rnorm(98, mean=77.47, sd=18.95), rnorm(95, mean=75.81, sd=19.29), rnorm(98, mean=77.79, sd=17.25), rnorm(95, mean=75.89, sd=19.44)),3) #sample size, M and SD for each cell; this will put it in a long file
AttWhite[AttWhite>100]<-100 #set upper bound for variable
AttWhite[AttWhite<0]<-0 #set lower bound for variable
AttArab<-round(c(rnorm(98,mean=64.11,sd=20.97),rnorm(95,mean=64.37,sd=20.03),rnorm(98, mean=64.16, sd=21.64), rnorm(95, mean=70.52, sd=18.55), rnorm(98, mean=65.29, sd=19.76), rnorm(95, mean=70.30, sd=17.98)),3)
AttArab[AttArab>100]<-100 #set upper bound for variable
AttArab[AttArab<0]<-0 #set lower bound for variable
rowID <- factor(seq(1,579))
caseID <- rep((1:193),3)
Wave <- c(rep("Baseline",193), rep("Post1", 193), rep ("Post2", 193))
COND <- c(rep("Friends", 98), rep("LittleMosque", 95), rep("Friends", 98), rep("LittleMosque", 95), rep("Friends", 98), rep("LittleMosque", 95))
Murrar_df<- data.frame(rowID, caseID, Wave, COND, AttArab, AttWhite) #groups the 3 variables into a single df:  ID#, DV, condition
#Arab_2way <- anova_test(
#data = Murrar_df, dv = AttArab, wid = caseID, #UEdf is our df, dv is our DV, wid is the participant ID
#between = COND, within = Wave # between is the between-subjects variable, within is the within subjects variable
#  )
#Arab_2way
#Diff<-round(c(rnorm(98,mean=12.68,sd=15.57),rnorm(95,mean=11.00,sd=17.25),rnorm(98, mean=13.31, sd=16.87), rnorm(95, mean=5.29, #sd=13.73), rnorm(98, mean=12.50, sd=16.24), rnorm(95, mean=5.60, sd=15.18)),3) #sample size, M and SD for each cell; this will #put it in a long file
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(lavaan)){install.packages("lavaan")}
#if(!require(semPlot)){install.packages("semPlot")}
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(psych)){install.packages("psych")}
#if(!require(jtools)){install.packages("jtools")}
#make caseID a factor
Murrar_df[,'caseID'] <- as.factor(Murrar_df[,'caseID'])
#make Wave an ordered factor
Murrar_df$Wave <- factor(Murrar_df$Wave, levels = c("Baseline", "Post1", "Post2"))
#make COND an ordered factor
Murrar_df$COND <- factor(Murrar_df$COND, levels = c("Friends", "LittleMosque"))
str(Murrar_df)
Murrar_df$Diff <- Murrar_df$AttWhite - Murrar_df$AttArab
View(Murrar_df)
psych::describeBy(Diff ~ Wave + COND, data = Murrar_df, mat=TRUE)
#Note. Recently my students and I have been having intermittent struggles with the describeBy function in the psych package. We have noticed that it is problematic when using .rds files and when using data directly imported from Qualtrics. If you are having similar difficulties, try uploading the .csv file and making the appropriate formatting changes.
CNDwiWV <- ggpubr::ggboxplot(
Murrar_df, x = "Wave", y = "Diff",
color = "COND", palette = "jco", xlab = "Assessment Wave", ylab = "Difference in Attitudes towards Whites and Arabs",
)
CNDwiWV
WVwiCND <- ggpubr::ggboxplot(
Murrar_df, x = "COND", y = "Diff",
color = "Wave", palette = "jco", xlab = "Treatment Condition", ylab = "Difference in Attitudes towards Whites and Arabs"
)
WVwiCND
Murrar_df %>%
group_by(Wave, COND) %>%
rstatix::identify_outliers(Diff)
Murrar_df %>%
group_by(Wave, COND) %>%
shapiro_test(Diff)
Murrar_df %>%
group_by(Wave, COND) %>%
rstatix::shapiro_test(Diff)
ggpubr::ggqqplot(Murrar_df, "Diff", ggtheme = theme_bw()) +  facet_grid(Wave ~ COND)
Murrar_df %>%
group_by(Wave) %>%
rstatix::levene_test(Diff ~ COND)
Murrar_df %>%
group_by(Wave) %>%
rstatix::levene_test(Diff ~ COND)
box_m(Murrar_df[, "Diff", drop = FALSE], Murrar_df$COND)
rstatix::box_m(Murrar_df[, "Diff", drop = FALSE], Murrar_df$COND)
?anova_test
Diff_2way <- rstatix::anova_test(
data = Murrar_df, dv = Diff, wid = caseID, #Murrar_df is our df, Diff is our df, wid is the caseID
between = COND, within = Wave # between is the between-subjects variable, within is the within subjects variable
)
Diff_2way
Diff_2way <- rstatix::anova_test(
data = Murrar_df, dv = Diff, wid = caseID, #Murrar_df is our df, Diff is our df, wid is the caseID
between = COND, within = Wave # between is the between-subjects variable, within is the within subjects variable
)
Diff_2way
Diff_2way <- rstatix::anova_test(
data = Murrar_df, dv = Diff, wid = caseID, #Murrar_df is our df, Diff is our df, wid is the caseID
between = COND, within = Wave # between is the between-subjects variable, within is the within subjects variable
)
Diff_2way
SimpleWave <- Murrar_df %>% #crate an object to hold the output
group_by(Wave) %>% #this group_by function is what results in three, one-way ANOVAs for each of the waves, separately
rstatix::anova_test(dv = Diff, wid = caseID, between = COND) %>% #the between = Cond means that each level of cond will be compared
get_anova_table() %>%
adjust_pvalue(method = "bonferroni") #we will get both the standard and adjusted p values
SimpleWave <- Murrar_df %>% #crate an object to hold the output
group_by(Wave) %>% #this group_by function is what results in three, one-way ANOVAs for each of the waves, separately
rstatix::anova_test(dv = Diff, wid = caseID, between = COND) %>% #the between = Cond means that each level of cond will be compared
get_anova_table() %>%
rstatix::adjust_pvalue(method = "bonferroni") #we will get both the standard and adjusted p values
SimpleWave <- Murrar_df %>% #crate an object to hold the output
group_by(Wave) %>% #this group_by function is what results in three, one-way ANOVAs for each of the waves, separately
rstatix::anova_test(dv = Diff, wid = caseID, between = COND) %>% #the between = Cond means that each level of cond will be compared
rstatix::get_anova_table() %>%
rstatix::adjust_pvalue(method = "bonferroni") #we will get both the standard and adjusted p values
SimpleWave
View(Murrar_df)
SimpleWave <- Murrar_df %>% #crate an object to hold the output
group_by(Wave) %>% #this group_by function is what results in three, one-way ANOVAs for each of the waves, separately
rstatix::anova_test(dv = Diff, wid = caseID, between = COND) %>% #the between = Cond means that each level of cond will be compared
rstatix::get_anova_table() %>%
rstatix::adjust_pvalue(method = "bonferroni") #we will get both the standard and adjusted p values
SimpleWave
SimpleCond <- Murrar_df %>%
group_by(COND) %>%
rstatix::anova_test(dv = Diff, wid = caseID, within = Wave) %>%
rstatix::get_anova_table() %>%
rstatix::adjust_pvalue(method = "bonferroni")
SimpleCond
pwcWVwiGP <- Murrar_df %>%
group_by(COND) %>%
pairwise_t_test(
Diff ~ Wave, paired = TRUE, detailed = TRUE,
p.adjust.method = "bonferroni"
) #%>%
pwcWVwiGP <- Murrar_df %>%
group_by(COND) %>%
rstatix::pairwise_t_test(
Diff ~ Wave, paired = TRUE, detailed = TRUE,
p.adjust.method = "bonferroni"
) #%>%
#select(-df, -statistic, -p) # Remove details
pwcWVwiGP
pwcWVwiGP <- Murrar_df %>%
group_by(COND) %>%
rstatix::pairwise_t_test(
Diff ~ Wave, paired = TRUE, detailed = TRUE,
rstatix::p.adjust.method = "bonferroni"
pwcWVwiGP <- Murrar_df %>%
group_by(COND) %>%
rstatix::pairwise_t_test(
Diff ~ Wave, paired = TRUE, detailed = TRUE,
p.adjust.method = "bonferroni"
) #%>%
#select(-df, -statistic, -p) # Remove details
pwcWVwiGP
Murrar_df %>%
pairwise_t_test(
Diff ~ Wave, paired = TRUE,
p.adjust.method = "bonferroni"
)
Murrar_df %>%
rstatix::pairwise_t_test(
Diff ~ Wave, paired = TRUE,
p.adjust.method = "bonferroni"
)
SimpleWave <- Murrar_df %>% #crate an object to hold the output
group_by(Wave) %>% #this group_by function is what results in three, one-way ANOVAs for each of the waves, separately
rstatix::anova_test(dv = Diff, wid = caseID, between = COND) %>% #the between = Cond means that each level of cond will be compared
rstatix::get_anova_table() %>%
adjust_pvalue(method = "bonferroni") #we will get both the standard and adjusted p values
SimpleWave <- Murrar_df %>% #crate an object to hold the output
group_by(Wave) %>% #this group_by function is what results in three, one-way ANOVAs for each of the waves, separately
rstatix::anova_test(dv = Diff, wid = caseID, between = COND) %>% #the between = Cond means that each level of cond will be compared
rstatix::get_anova_table() %>%
rstatix::adjust_pvalue(method = "bonferroni") #we will get both the standard and adjusted p values
SimpleWave
pwcWVwiGP <- pwcWVwiGP %>% add_xy_position(x = "Wave")
pwcWVwiGP <- pwcWVwiGP %>% rstatix::add_xy_position(x = "Wave")
CNDwiWV +
stat_pvalue_manual(pwcWVwiGP, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = get_test_label(Diff_2way, detailed = TRUE),
caption = get_pwc_label(pwcWVwiGP)
)
pwcWVwiGP <- pwcWVwiGP %>% rstatix::add_xy_position(x = "Wave")
CNDwiWV +
stat_pvalue_manual(pwcWVwiGP, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = get_test_label(Diff_2way, detailed = TRUE),
caption = get_pwc_label(pwcWVwiGP)
)
pwcWVwiGP <- pwcWVwiGP %>% rstatix::add_xy_position(x = "Wave")
CNDwiWV +
ggpubr::stat_pvalue_manual(pwcWVwiGP, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = get_test_label(Diff_2way, detailed = TRUE),
caption = get_pwc_label(pwcWVwiGP)
)
pwcWVwiGP <- pwcWVwiGP %>% rstatix::add_xy_position(x = "Wave")
CNDwiWV +
ggpubr::stat_pvalue_manual(pwcWVwiGP, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = ggpubr::get_test_label(Diff_2way, detailed = TRUE),
caption = get_pwc_label(pwcWVwiGP)
)
pwcWVwiGP <- pwcWVwiGP %>% rstatix::add_xy_position(x = "Wave")
CNDwiWV +
ggpubr::stat_pvalue_manual(pwcWVwiGP, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = rstatix::get_test_label(Diff_2way, detailed = TRUE),
caption = get_pwc_label(pwcWVwiGP)
)
pwcWVwiGP <- pwcWVwiGP %>% rstatix::add_xy_position(x = "Wave")
CNDwiWV +
ggpubr::stat_pvalue_manual(pwcWVwiGP, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = rstatix::get_test_label(Diff_2way, detailed = TRUE),
caption = rstatix::get_pwc_label(pwcWVwiGP)
)
pwcWVwiGP <- pwcWVwiGP %>% add_xy_position(x = "Wave") #pwcWVwiGP were my pairwise comparisons for the simple effect
pwcWVwiGP <- pwcWVwiGP %>% rstatix::add_xy_position(x = "Wave") #pwcWVwiGP were my pairwise comparisons for the simple effect
WVwiCND +  #WVwiCND was the boxplot before I did the ANOVA
ggpubr::stat_pvalue_manual(pwcWVwiGP, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = get_test_label(Diff_2way, detailed = TRUE), #UE_2way was my omnibus ANOVA model
caption = get_pwc_label(pwcWVwiGP) #and again the pairwise comparisons for the simple effect
)
pwcWVwiGP <- pwcWVwiGP %>% rstatix::add_xy_position(x = "Wave") #pwcWVwiGP were my pairwise comparisons for the simple effect
WVwiCND +  #WVwiCND was the boxplot before I did the ANOVA
ggpubr::stat_pvalue_manual(pwcWVwiGP, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = rstatix::get_test_label(Diff_2way, detailed = TRUE), #UE_2way was my omnibus ANOVA model
caption = rstatix::get_pwc_label(pwcWVwiGP) #and again the pairwise comparisons for the simple effect
)
MASS::write.matrix(pwcWVwiGP, sep = ",", file = "pwcWVwiGP.csv")
#this command can also be used to export other output
MASS::write.matrix(Diff_2way$ANOVA, sep = ",", file = "Diff_2way.csv") #can get name of specific part of object by using str(object)
MASS::write.matrix(SimpleWave, sep = ",", file = "SimpleWave.csv")
MASS::write.matrix(SimpleCond, sep = ",", file = "SimpleCond.csv")
effectsize::eta2_to_f(0.017) #interaction effect
WebPower::wp.rmanova(n=193, ng=2, nm=3, f = .1315, nscor = .99, alpha = .05, power = NULL, type = 2)
WebPower::wp.rmanova(n=193, ng=2, nm=3, f = .1315, nscor = .99, alpha = .05, power = NULL, type = 2)
wp.rmanova(n=NULL, ng=2, nm=3, f = .1315, nscor = .99, alpha = .05, power = .80, type = 2)
WebPower::wp.rmanova(n=NULL, ng=2, nm=3, f = .1315, nscor = .99, alpha = .05, power = .80, type = 2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(gplots)){install.packages("gplots")} #easy plotting for simple ANOVA
#if(!require(tidyverse)){install.packages("tidyverse")} #creating new variables and other handy functions
#if(!require(dplyr)){install.packages("dplyr")} #a specific part of the tidyverse with useful tools for manipulating data
#if(!require(psych)){install.packages("psych")} #for descriptive statistics and writing them as csv files
#if(!require(rstatix)){install.packages("rstatix")} #a number of wrappers for ANOVA models; today for evaluating the Shapiro
#if(!require(lsr)){install.packages("lsr")} #produces effect sizes
#if(!require(pwr)){install.packages("pwr")} #estimating sample sizes and power analysis
#if(!require(apaTAbles)){install.packages("apaTables")} #produces an APA style table for ANOVAs and other models
#if(!require(formattable)){install.packages("formattable")} #produces an APA style table for ANOVAs and other models
#if(!require(effectsize)){install.packages("effectsize")} #produces an APA style table for ANOVAs and other models
#Note, this script results in a different simulation than is in the ReadySetR lesson
set.seed(210820) #sets a random seed so that we get the same results each time
Accurate <- c(rnorm(30, mean=1.18, sd=0.80), rnorm(30, mean=1.83, sd = 0.58), rnorm(30, mean = 1.76, sd = 0.56))#sample size, M and SD for each group
Accurate[Accurate>3]<-3 #set upper bound for DV
Accurate[Accurate<0]<-0 #set lower bound for DV
moreTalk <- c(rnorm(30, mean=-.82, sd=0.91), rnorm(30, mean=-0.39, sd = 0.66), rnorm(30, mean = -0.04, sd = 0.71))#sample size, M and SD for each group
moreTalk[moreTalk>2]<- 2 #set upper bound for DV
moreTalk[moreTalk<-2]<- -2 #set lower bound for DV
ID<-factor(seq(1,90)) #IDs for participants
COND<-c(rep("High", 30), rep("Low", 30), rep("Control", 30)) #name factors and identify how many in each group; should be in same order as first row of script
accSIM30 <-data.frame(ID, COND, Accurate, moreTalk) #groups the 3 variables into a single df:  ID#, DV, condition
str(accSIM30)
citr:::insert_citation()
citr:::insert_citation()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#if(!require(reshape2)){install.packages("reshape2")} #used to convert data from long to wide
#if(!require(data.table)){install.packages("data.table")}#used to convert data from long to wide
#if(!require(broom)){install.packages("broom")}
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(psych)){install.packages("psych")}
#if(!require(ggpubr)){install.packages("ggpubr")} #easy plots
#if(!require(rstatix)){install.packages("rstatix")} #pipe-friendly R functions
#if(!require(MASS)){install.packages("MASS")} #export objects for table making
#if(!require(WebPower)){install.packages("WebPower")} #power analysis for repeated measures
library(tidyverse)
set.seed(210813)#change this to any different number (and rerun the simulation) to rework the chapter problem
AttWhite<-round(c(rnorm(98,mean=76.79,sd=18.55),rnorm(95,mean=75.37,sd=18.99),rnorm(98, mean=77.47, sd=18.95), rnorm(95, mean=75.81, sd=19.29), rnorm(98, mean=77.79, sd=17.25), rnorm(95, mean=75.89, sd=19.44)),3) #sample size, M and SD for each cell; this will put it in a long file
AttWhite[AttWhite>100]<-100 #set upper bound for variable
AttWhite[AttWhite<0]<-0 #set lower bound for variable
AttArab<-round(c(rnorm(98,mean=64.11,sd=20.97),rnorm(95,mean=64.37,sd=20.03),rnorm(98, mean=64.16, sd=21.64), rnorm(95, mean=70.52, sd=18.55), rnorm(98, mean=65.29, sd=19.76), rnorm(95, mean=70.30, sd=17.98)),3)
AttArab[AttArab>100]<-100 #set upper bound for variable
AttArab[AttArab<0]<-0 #set lower bound for variable
rowID <- factor(seq(1,579))
caseID <- rep((1:193),3)
Wave <- c(rep("Baseline",193), rep("Post1", 193), rep ("Post2", 193))
COND <- c(rep("Friends", 98), rep("LittleMosque", 95), rep("Friends", 98), rep("LittleMosque", 95), rep("Friends", 98), rep("LittleMosque", 95))
Murrar_df<- data.frame(rowID, caseID, Wave, COND, AttArab, AttWhite) #groups the 3 variables into a single df:  ID#, DV, condition
#make caseID a factor
Murrar_df[,'caseID'] <- as.factor(Murrar_df[,'caseID'])
#make Wave an ordered factor
Murrar_df$Wave <- factor(Murrar_df$Wave, levels = c("Baseline", "Post1", "Post2"))
#make COND an ordered factor
Murrar_df$COND <- factor(Murrar_df$COND, levels = c("Friends", "LittleMosque"))
Murrar_df$Diff <- Murrar_df$AttWhite - Murrar_df$AttArab #creates the difference score
library(tidyverse)
set.seed(210813)#change this to any different number (and rerun the simulation) to rework the chapter problem
AttWhite<-round(c(rnorm(98,mean=76.79,sd=18.55),rnorm(95,mean=75.37,sd=18.99),rnorm(98, mean=77.47, sd=18.95), rnorm(95, mean=75.81, sd=19.29), rnorm(98, mean=77.79, sd=17.25), rnorm(95, mean=75.89, sd=19.44)),3) #sample size, M and SD for each cell; this will put it in a long file
AttWhite[AttWhite>100]<-100 #set upper bound for variable
AttWhite[AttWhite<0]<-0 #set lower bound for variable
AttArab<-round(c(rnorm(98,mean=64.11,sd=20.97),rnorm(95,mean=64.37,sd=20.03),rnorm(98, mean=64.16, sd=21.64), rnorm(95, mean=70.52, sd=18.55), rnorm(98, mean=65.29, sd=19.76), rnorm(95, mean=70.30, sd=17.98)),3)
AttArab[AttArab>100]<-100 #set upper bound for variable
AttArab[AttArab<0]<-0 #set lower bound for variable
rowID <- factor(seq(1,579))
caseID <- rep((1:193),3)
Wave <- c(rep("Baseline",193), rep("Post1", 193), rep ("Post2", 193))
COND <- c(rep("Friends", 98), rep("LittleMosque", 95), rep("Friends", 98), rep("LittleMosque", 95), rep("Friends", 98), rep("LittleMosque", 95))
Murrar_df<- data.frame(rowID, caseID, Wave, COND, AttArab, AttWhite) #groups the 3 variables into a single df:  ID#, DV, condition
#make caseID a factor
Murrar_df[,'caseID'] <- as.factor(Murrar_df[,'caseID'])
#make Wave an ordered factor
Murrar_df$Wave <- factor(Murrar_df$Wave, levels = c("Baseline", "Post1", "Post2"))
#make COND an ordered factor
Murrar_df$COND <- factor(Murrar_df$COND, levels = c("Friends", "LittleMosque"))
Murrar_df$Diff <- Murrar_df$AttWhite - Murrar_df$AttArab #creates the difference score
str(Murrar_df)
#library(reshape2)
# Create a new df (Murrar_wide)
# Identify the original df
#In the transition from long-to-wide it seems like you can only do one time-varying variable at a time
#When there are multiple time-varying and time-static variables, but all the time-static variables on the left side of the tilde
#Put the name of the single time-varying variable in the concatonated list
Murrar1 <- reshape2::dcast(data = Murrar_df, formula =caseID +COND ~ Wave, value.var = "AttArab")
#before restructuring a second variable, rename the first variable
Murrar1 <- rename(Murrar1, AttArabB = "Baseline", AttArabP1 = "Post1", AttArabP2 = "Post2")
#repeat the process for additional variables; but give the new df new names -- otherwise you'll overwrite your work
Murrar2 <- reshape2::dcast(data = Murrar_df, formula =caseID ~Wave, value.var = "AttWhite")
Murrar2 <- rename(Murrar2, AttWhiteB = "Baseline", AttWhiteP1 = "Post1", AttWhiteP2 = "Post2")
#Now we join them
Murrar_wide <- dplyr::full_join(Murrar1, Murrar2, by = c("caseID"))
str(Murrar_wide )
View(Murrar_wide)
ggpubr::ggscatter (
Murrar_wide, x = "AttArabB", y = "AttArabP1",
color = "COND", add = "reg.line"
)+
stat_regline_equation(
aes(label =  paste(..eq.label.., ..rr.label.., sep = "~~~~"), color = COND)
)
ggpubr::ggscatter (
Murrar_wide, x = "AttArabB", y = "AttArabP1",
color = "COND", add = "reg.line"
)+
ggpubr::stat_regline_equation(
aes(label =  paste(..eq.label.., ..rr.label.., sep = "~~~~"), color = COND)
)
Murrar_wide %>% rstatix::anova_test(AttArabP1 ~ COND*AttArabB)
AttArabB_Mod <- lm (AttArabP1 ~ AttArabB + COND, data = Murrar_wide) #Create a linear regression model predicting DV from COV & IV
AttArabB_Mod
AttArabB_Mod.metrics <- broom::augment(AttArabB_Mod) #new model by augmenting the lm model
head(AttArabB_Mod.metrics,3) #shows the first three rows of the UEmodel.metrics
shapiro_test(AttArabB_Mod.metrics$.resid)#apply shapiro_test to that augmented model
rstatix::shapiro_test(AttArabB_Mod.metrics$.resid)#apply shapiro_test to that augmented model
AttArabB_Mod.metrics %>% levene_test(.resid ~ COND)
AttArabB_Mod.metrics %>% rstatix::levene_test(.resid ~ COND)
AttArabB_Mod.metrics%>% #from our model metrics
filter(abs(.std.resid)>3)%>% #show us any standardized residuals that are >3
as.data.frame()
MurrarB_ANCOVA <- Murrar_wide %>%
anova_test(AttArabP1 ~ AttArabB + COND)
MurrarB_ANCOVA <- Murrar_wide %>%
rstatix::anova_test(AttArabP1 ~ AttArabB + COND)
get_anova_table(MurrarB_ANCOVA )
MurrarB_ANCOVA <- Murrar_wide %>%
rstatix::anova_test(AttArabP1 ~ AttArabB + COND)
rstatix::get_anova_table(MurrarB_ANCOVA )
pwc_B <- Murrar_wide %>%
emmeans::emmeans_test(
AttArabP1 ~ COND, covariate = AttArabB,
p.adjust.method = "none"
)
#library(emmeans)
pwc_B <- Murrar_wide %>%
emmeans_test(
AttArabP1 ~ COND, covariate = AttArabB,
p.adjust.method = "none"
)
?emmeans_test
#library(emmeans)
pwc_B <- Murrar_wide %>%
rstatix::emmeans_test(
AttArabP1 ~ COND, covariate = AttArabB,
p.adjust.method = "none"
)
pwc_B
emmeans_B <- get_emmeans(pwc_B)
?get_emmeans
?get_emmeans
?(get_emmeans)
?get_emmeans
emmeans_B <- rstatix::get_emmeans(pwc_B)
emmeans_B
emmeans_B <- rstatix::get_emmeans(pwc_B, digits=3)
emmeans_B <- rstatix::get_emmeans(pwc_B)
emmeans_B
descripts_P1 <- psych::describeBy(AttArabP1 ~ COND, data = Murrar_wide, mat = TRUE)
descripts_P1
#Note. Recently my students and I have been having intermittent struggles with the describeBy function in the psych package. We have noticed that it is problematic when using .rds files and when using data directly imported from Qualtrics. If you are having similar difficulties, try uploading the .csv file and making the appropriate formatting changes.
#getting p values requires the corr.test function from the psych package;
#because some function names appear is multiple packages, it is sometimes essential to point a function to the proper package
#use the double colon to specify package and function
MurP1_Rmat <- psych::corr.test(Murrar_wide[c("AttArabB", "AttArabP1")])
MurP1_Rmat
apaTables::apa.cor.table(Murrar_wide[c("AttArabB", "AttArabP1")], table.number = 1 )
#You can save this as a Microsoft word document by adding this statement into the command: filename = "your_filename.doc"
MASS::write.matrix(pwc_B, sep = ",", file = "pwc_B.csv")
MASS::write.matrix(emmeans_B, sep = ",", file = "emmeans_B.csv")
MASS::write.matrix(descripts_P1, sep = ",", file = "descripts_P1.csv")
pwc_B <- pwc_B %>% add_xy_position(x = "COND", fun = "mean_se")
pwc_B <- pwc_B %>% rstatix::add_xy_position(x = "COND", fun = "mean_se")
ggpubr::ggline(get_emmeans(pwc_B), x = "COND", y = "emmean") +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
stat_pvalue_manual(pwc_B, hide.ns = TRUE, tip.length = FALSE) +
labs(
subtitle = rstatix::get_test_label(MurrarB_ANCOVA, detailed = TRUE),
caption = rstatix::get_pwc_label(pwc_B)
)
pwc_B <- pwc_B %>% rstatix::add_xy_position(x = "COND", fun = "mean_se")
ggpubr::ggline(rstatix::get_emmeans(pwc_B), x = "COND", y = "emmean") +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
stat_pvalue_manual(pwc_B, hide.ns = TRUE, tip.length = FALSE) +
labs(
subtitle = rstatix::get_test_label(MurrarB_ANCOVA, detailed = TRUE),
caption = rstatix::get_pwc_label(pwc_B)
)
pwc_B <- pwc_B %>% rstatix::add_xy_position(x = "COND", fun = "mean_se")
ggpubr::ggline(rstatix::get_emmeans(pwc_B), x = "COND", y = "emmean") +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
ggpubr::stat_pvalue_manual(pwc_B, hide.ns = TRUE, tip.length = FALSE) +
labs(
subtitle = rstatix::get_test_label(MurrarB_ANCOVA, detailed = TRUE),
caption = rstatix::get_pwc_label(pwc_B)
)
ggpubr::ggscatter (
Murrar_wide, x = "AttWhiteP1", y = "AttArabP1",
color = "COND", add = "reg.line"
)+
stat_regline_equation(
aes(label =  paste(..eq.label.., ..rr.label.., sep = "~~~~"), color = COND)
)
ggpubr::ggscatter (
Murrar_wide, x = "AttWhiteP1", y = "AttArabP1",
color = "COND", add = "reg.line"
)+
ggpubr::stat_regline_equation(
aes(label =  paste(..eq.label.., ..rr.label.., sep = "~~~~"), color = COND)
)
Murrar_wide %>% rstatix::anova_test(AttArabP1 ~ COND*AttWhiteP1)
WhCov_mod <- lm (AttArabP1 ~ AttWhiteP1 + COND, data = Murrar_wide) #Create a linear regression model predicting DV from COV & IV
WhCov_mod
WhCov_mod.metrics <- broom::augment(WhCov_mod)
head(WhCov_mod.metrics,3) #shows the first three rows of the UEcon_model.metrics
shapiro_test(WhCov_mod.metrics$.resid)
rstatix::shapiro_test(WhCov_mod.metrics$.resid)
rstatix::shapiro_test(WhCov_mod.metrics$.resid)
WhCov_mod.metrics %>% rstatix::levene_test(.resid ~ COND)
WhCov_mod.metrics %>%
filter(abs(.std.resid)>3)%>%
as.data.frame()
WhCov_ANCOVA <- Murrar_wide %>%
anova_test(AttArabP1 ~ AttWhiteP1 + COND)
WhCov_ANCOVA <- Murrar_wide %>%
rstatix::anova_test(AttArabP1 ~ AttWhiteP1 + COND)
get_anova_table(WhCov_ANCOVA)
WhCov_ANCOVA <- Murrar_wide %>%
rstatix::anova_test(AttArabP1 ~ AttWhiteP1 + COND)
rstatix::get_anova_table(WhCov_ANCOVA)
pwc_cond <- Murrar_wide %>%
rstatix::emmeans_test(
AttArabP1 ~ COND, covariate = AttWhiteP1,
p.adjust.method = "none"
)
pwc_cond
emmeans_cond <- get_emmeans(pwc_cond)
emmeans_cond <- rstatix::get_emmeans(pwc_cond)
emmeans_cond
descripts_cond <- psych::describeBy(AttArabP1 ~ COND, data = Murrar_wide, mat = TRUE)
descripts_cond
apaTables::apa.cor.table(Murrar_wide[c("AttArabP1", "AttWhiteP1")], table.number = 2 )
#You can save this as a Microsoft word document by adding this statement into the command: filename = "your_filename.doc"
MASS::write.matrix(pwc_cond, sep = ",", file = "pwc_con.csv")
MASS::write.matrix(emmeans_cond, sep = ",", file = "emmeans_con.csv")
MASS::write.matrix(descripts_cond, sep = ",", file = "descripts_con.csv")
pwc_cond <- pwc_cond %>% rstatix::add_xy_position(x = "COND", fun = "mean_se")
ggpubr::ggline(rstatix::get_emmeans(pwc_B), x = "COND", y = "emmean") +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
rstatix::stat_pvalue_manual(pwc_B, hide.ns = TRUE, tip.length = FALSE) +
labs(
subtitle = rstatix::get_test_label(WhCov_ANCOVA, detailed = TRUE),
caption = rstatix::get_pwc_label(pwc_cond)
)
pwc_cond <- pwc_cond %>% rstatix::add_xy_position(x = "COND", fun = "mean_se")
ggpubr::ggline(rstatix::get_emmeans(pwc_B), x = "COND", y = "emmean") +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
ggpubr::stat_pvalue_manual(pwc_B, hide.ns = TRUE, tip.length = FALSE) +
labs(
subtitle = rstatix::get_test_label(WhCov_ANCOVA, detailed = TRUE),
caption = rstatix::get_pwc_label(pwc_cond)
)
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
